{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/Registration/views/encounters/OutpatientReception.vue"],"names":["LocationService","Service","constructor","type","name","parentLocation","postJson","params","getJson","conceptId","ConceptService","getConceptID","id","regionID","traditionalAuthorityID","villageID","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","PatientReceptionService","AppEncounterService","patientID","providerID","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","receptionService","watch","ready","isReady","this","patient","getID","getFields","immediate","deep","methods","formData","computedData","encounter","createEncounter","toastWarning","registrationData","resolveObs","registrationObs","saveObservationList","$router","push","helpText","FieldType","TT_SELECT","validation","value","Validation","required","computedValue","v","obs","buildValueCoded","options","label","buildValueText","condition","referral","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","__exports__","async","facilities","f","isEmpty","map","facility","location_id","other","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","villages","village","village_id"],"mappings":"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","file":"js/chunk-2792cee2.d3eca702.js","sourcesContent":["import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f))\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientReceptionService } from \"@/apps/Registration/services/patient_reception_service\"\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { toastWarning } from '@/utils/Alerts';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        receptionService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.receptionService = new PatientReceptionService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            const encounter = await this.receptionService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create registration encounter')\n            \n            const registrationData = await this.resolveObs({...computedData})\n            const registrationObs = await this.receptionService.saveObservationList(registrationData)\n            if (!registrationObs) return toastWarning('Unable to save observations')\n\n            this.$router.push(`/registration/encounters/patient_services/${this.patientID}`);\n        },\n        \n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'referral',\n                    helpText: 'Is the Patient a Referral Case From Another Health Facility?',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: (v: Option) => ({ obs: this.receptionService.buildValueCoded('Is patient referred?', v.value)}),\n                    options: () => {\n                        return [\n                            { label: 'Yes', value: 'Yes' },\n                            { label: 'No', value: 'No' },\n                        ]\n                    }\n                },\n                {\n                    id: 'referring_facility_name',\n                    helpText: 'Referred from',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ label }: Option) => ({obs: this.receptionService.buildValueText('Referred from', label)}),\n                    condition: (fields: any) => fields.referral.value === 'Yes',\n                    options: (_: any, filter='') => getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./OutpatientReception.vue?vue&type=template&id=97d026d8&ts=true\"\nimport script from \"./OutpatientReception.vue?vue&type=script&lang=ts\"\nexport * from \"./OutpatientReception.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}