{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/OPD/views/encounters/OutcomeStatus.vue"],"names":["LocationService","Service","constructor","type","name","parentLocation","postJson","params","getJson","conceptId","ConceptService","getConceptID","id","regionID","traditionalAuthorityID","villageID","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","PatientReferralService","AppEncounterService","patientID","providerID","PatientAdmitService","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","referralService","admissionService","watch","ready","isReady","this","getFields","immediate","deep","methods","formData","computedData","opd_outcome","value","createEncounter","admissionData","resolveObs","saveObservationList","referralData","nextTask","helpText","FieldType","TT_SELECT","validation","Validation","required","options","label","computedValue","tag","obs","buildValueText","condition","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","other","buildValueCodedFromConceptId","concept_id","getSpecialistClinics","getFacilityWards","__exports__","async","facilities","f","isEmpty","map","facility","location_id","wards","ward","clinics","clinic","getRegions","regions","region","region_id","getDistricts","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","villages","village","village_id"],"mappings":"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","file":"js/chunk-ee0b2d28.7c22cf52.js","sourcesContent":["import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f))\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities, getFacilityWards, getSpecialistClinics } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { PatientReferralService } from '@/apps/OPD/services/patient_referral_service'\nimport { PatientAdmitService } from '@/apps/OPD/services/patient_admit_service'\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    referralService: {} as any,\n    admissionService: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(isReady: boolean) {\n        if(isReady){\n          this.referralService = new PatientReferralService(this.patientID, this.providerID)\n          this.admissionService = new PatientAdmitService(this.patientID, this.providerID)\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true,\n      deep: true\n    }\n  },\n  methods: {\n    async onSubmit(formData: any, computedData: any){\n      if(formData.opd_outcome.value === 'Admission') {\n        await this.admissionService.createEncounter()\n        const admissionData = await this.resolveObs({...computedData}, 'admission')\n        await this.admissionService.saveObservationList(admissionData)\n      } else {\n        await this.referralService.createEncounter()\n        const referralData = await this.resolveObs({...computedData}, 'referral')\n        await this.referralService.saveObservationList(referralData)\n      }\n      \n      this.nextTask()        \n    },\n    getFields(): Array<Field>{\n      return [\n        {\n          id: 'opd_outcome',\n          helpText: 'Select outcome',\n          type: FieldType.TT_SELECT,\n          validation: (value: any) => Validation.required(value),\n          options: () => {\n            return [\n              { label: 'Admit', value: 'Admission' },\n              { label: 'Internal referral', value: 'Internal referral' },\n              { label: 'Refer to another hospital/clinic', value: 'External referral' },\n            ]\n          }\n        },\n        {\n          id: 'facility_name',\n          helpText: 'Select Facility name',\n          type: FieldType.TT_SELECT,\n          validation: (value: any) => Validation.required(value),\n          computedValue: ({ value }: Option) => ({\n            tag: 'referral',\n            obs: this.referralService.buildValueText('Referred', value)\n          }),\n          condition: (fields: any) => fields.opd_outcome.value === 'External referral',\n          options: (_: any, filter='') => getFacilities(filter),\n          config: {\n              showKeyboard: true,\n              isFilterDataViaApi: true\n          }\n        },\n        {\n          id: 'specialist_clinic',\n          helpText: 'Select clinic',\n          type: FieldType.TT_SELECT,\n          validation: (value: any) => Validation.required(value),\n          computedValue: ({ other }: Option) => ({\n            tag: 'referral',\n            obs: this.referralService.buildValueCodedFromConceptId('Specialist clinic', other.concept_id)\n          }),\n          condition: (fields: any) => fields.opd_outcome.value === 'Internal referral',\n          options: () => getSpecialistClinics(),\n          config: { showKeyboard: true }\n        },    \n        {\n          id: 'wards',\n          helpText: 'Select ward',\n          type: FieldType.TT_SELECT,\n          condition: (fields: any) => fields.opd_outcome.value === 'Admission',\n          validation: (value: any) => Validation.required(value),\n          computedValue: ({ value }: Option) => ({\n            tag: 'admission',\n            obs: this.admissionService.buildValueText('Admit to ward', value)\n          }),\n          options: (_: any, filter='') => getFacilityWards(filter),\n          config: {\n              showKeyboard: true,\n              isFilterDataViaApi: true\n          }\n        },  \n      ]\n    }\n  }\n})\n","import { render } from \"./OutcomeStatus.vue?vue&type=template&id=11619aa6&ts=true\"\nimport script from \"./OutcomeStatus.vue?vue&type=script&lang=ts\"\nexport * from \"./OutcomeStatus.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}