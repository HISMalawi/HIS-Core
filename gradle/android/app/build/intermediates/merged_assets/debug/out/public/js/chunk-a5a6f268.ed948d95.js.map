{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ANC/Views/Encounters/CurrentPregnancy.vue"],"names":["LocationService","Service","constructor","type","name","parentLocation","postJson","params","getJson","conceptId","ConceptService","getConceptID","id","regionID","traditionalAuthorityID","villageID","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","this","AncCurrentPregnancyService","patientID","providerID","getFields","immediate","methods","computedData","enrollPatient","e","RecordConflictError","console","warn","obs","resolveObs","createEncounter","saveObservationList","nextTask","buildDelieveryDateObs","lmpDate","buildValueDate","estimateDelieveryDate","buildValueNumber","calculateWeekOfFirstVisit","proxyID","helpText","FieldType","TT_ANC_LMP_DATE_INPUT","computedValue","v","value","beforeNext","async","gestationWeeks","parseInt","other","alertConfirmation","validation","validateSeries","Validation","required","Date","today","config","initialDate","date","calculateDelieveryDate","d","HisDate","toStandardHisDisplayFormat","calculateGestationWeeks","allowUnknown","TT_NUMBER","condition","f","lnmp","calculateGestationDateFromPeriod","rangeOf","TT_SELECT","buildValueText","label","options","filter","getFacilities","footerBtns","slot","onClickComponentEvents","setValue","btnEvent","btnOutput","onClick","getLocationName","showKeyboard","isFilterDataViaApi","buildValueCoded","yesNoOptions","bed_net_available_for_use","__exports__","facilities","isEmpty","map","facility","location_id","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","villages","village","village_id","AppEncounterService","super","program","PatientProgramService","enrollProgram","setStateDate","setStateId","updateState","lnmpDate","theDate","setDate","getDate","s","String","Math","floor","period","dayjs","subtract","endOf","format","setMonth","getMonth","month","AppendleadingZero","day","getFullYear"],"mappings":"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","file":"js/chunk-a5a6f268.ed948d95.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { PatientProgramService } from \"@/services/patient_program_service\"\nimport dayjs from \"dayjs\";\nimport { AppendleadingZero } from \"@/utils/Strs\";\n\nexport class AncCurrentPregnancyService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 81, providerID)\n    }\n\n    async enrollPatient() {\n        const program = new PatientProgramService(this.patientID)\n        /**\n         * TODO: Check if patient is already enrolled first\n        */\n        await program.enrollProgram()\n        program.setStateDate(this.date)\n        program.setStateId(118) //Currently on treatment state... Please remove this ID hack if you can\n        await program.updateState()\n    }\n\n    calculateWeekOfFirstVisit(lnmpDate: string) {\n        const theDate: any = new Date(lnmpDate)\n        theDate.setDate(theDate.getDate() + 7);\n        const today: any = new Date(this.getDate());\n        const s = today - theDate;\n        return String(Math.floor(s / (24 * 60 * 60 * 7 * 1000)));\n    }\n\n    calculateGestationDateFromPeriod(period: number) {\n        return dayjs(this.date).subtract(period, 'months').endOf('month').format('YYYY-MM-DD')\n    }\n\n    estimateDelieveryDate(lnmpDate: string) {\n        const theDate: any = new Date(lnmpDate)\n        theDate.setDate(theDate.getDate() + 7);\n        theDate.setMonth(theDate.getMonth() + 9);\n        const month = AppendleadingZero(theDate.getMonth()+1)\n        const day = AppendleadingZero(theDate.getDate())\n        return `${theDate.getFullYear()}-${month}-${day}`\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncCurrentPregnancyService } from \"@/apps/ANC/Services/anc_current_pregnancy\"\nimport { Field, FooterBtnEvent, Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { ObsValue } from '@/services/observation_service'\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport HisDate from \"@/utils/Date\"\nimport { alertConfirmation } from '@/utils/Alerts'\nimport { RecordConflictError } from '@/services/service'\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n            this.service = new AncCurrentPregnancyService(this.patientID, this.providerID)\n            this.fields = this.getFields()\n        } \n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      try {\n        await this.service.enrollPatient()\n      } catch (e) {\n       if(e instanceof RecordConflictError) {\n        console.warn(`${e}`)\n       } else {\n         throw e\n       }\n      }\n      const obs = await this.resolveObs(computedData)\n      await this.service.createEncounter()\n      await this.service.saveObservationList(obs as ObsValue[])\n      this.nextTask()\n    },\n    buildDelieveryDateObs(lmpDate: string) {\n      if (lmpDate != 'Unknown') {\n        return [\n          this.service.buildValueDate('Last menstrual period', lmpDate),\n          this.service.buildValueDate('Estimated date of delivery', \n            this.service.estimateDelieveryDate(lmpDate)\n          ),\n          this.service.buildValueNumber('Week of First Visit', \n            this.service.calculateWeekOfFirstVisit(lmpDate)\n          )\n        ]\n      }\n    },\n    getFields(): Field[] {\n        return [\n            {\n                id: 'lnmp',\n                proxyID: 'delivery_date',\n                helpText: 'Last Normal Menstrual Period',\n                type: FieldType.TT_ANC_LMP_DATE_INPUT,\n                computedValue: (v: Option) => this.buildDelieveryDateObs(v.value as string),\n                beforeNext: async (v: Option) => {\n                  const gestationWeeks = parseInt(v.other)\n                  if (typeof gestationWeeks === 'number') {\n                    if (gestationWeeks <= 0 || gestationWeeks > 42) {\n                      if ((await alertConfirmation('Gestation weeks out of range of 0-42. Are you sure you want to continue?'))) {\n                        return true\n                      } else {\n                        return false\n                      }\n                    }\n                  }\n                  return true\n                },\n                validation: (v: Option) => this.validateSeries([\n                  () => Validation.required(v),\n                  () => {\n                      if (v.value) {\n                        const lmpDate = new Date(v.value)\n                        const today = new Date()\n                        if (lmpDate > today) {\n                          return ['Last menstrual period cannot be in the future']\n                        }\n                      }\n                      return null\n                  }\n                ]),\n                config: {\n                    initialDate: () => this.service.date,\n                    calculateDelieveryDate: (d: string) => HisDate.toStandardHisDisplayFormat(\n                      this.service.estimateDelieveryDate(d)\n                    ),\n                    calculateGestationWeeks: (d: string) => this.service.calculateWeekOfFirstVisit(d),\n                    allowUnknown: true\n                }\n            },\n            {\n                id: 'estimate_lmp',\n                proxyID: 'delivery_date',\n                helpText: 'Gestation (months)',\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.lnmp.value === 'Unknown',\n                computedValue: (v: Option) => {\n                    return this.buildDelieveryDateObs(this.service.calculateGestationDateFromPeriod(v.value))\n                },\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 10)\n                ])\n            },\n            {\n                id: 'planned_delivery_place',\n                helpText: 'Planned delivery place',\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => this.service.buildValueText('Planned Delivery Place', v.label),\n                validation: (v: Option) => Validation.required(v),\n                options: (_: any, filter='') => getFacilities(filter),\n                config: {\n                    footerBtns: [\n                      {\n                        name: \"Here\",\n                        slot: \"end\",\n                        onClickComponentEvents: {\n                          setValue: (btnEvent: FooterBtnEvent) => {\n                            return btnEvent.btnOutput\n                          }\n                        },\n                        onClick: () => AncCurrentPregnancyService.getLocationName()\n                      }\n                    ],\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            },\n            {\n                id: 'bed_net_available_for_use',\n                helpText: 'Mosquito net in good condition available for own use',\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => this.service.buildValueCoded('Do you use bed nets', v.value),\n                validation: (v: Option) => Validation.required(v),\n                options: () => {\n                    return this.yesNoOptions()\n                }\n            },\n            {\n                id: 'bed_net_given',\n                helpText: 'Bed net given today',\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => this.service.buildValueCoded('Mosquito net started', v.value),\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.bed_net_available_for_use.value === 'No',\n                options: () => {\n                    return this.yesNoOptions()\n                }\n            },\n            {\n                id: 'previous_ttv_given',\n                helpText: 'Previous TTV given before this pregnancy',\n                type: FieldType.TT_NUMBER,\n                computedValue: (v: Option) => this.service.buildValueNumber('TTV', v.value),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    }\n  }\n})\n","import { render } from \"./CurrentPregnancy.vue?vue&type=template&id=1e0496c7&ts=true\"\nimport script from \"./CurrentPregnancy.vue?vue&type=script&lang=ts\"\nexport * from \"./CurrentPregnancy.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}