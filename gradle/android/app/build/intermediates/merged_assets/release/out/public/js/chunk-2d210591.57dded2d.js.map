{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/Registration/views/encounters/OutpatientReception.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","PatientReceptionService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","receptionService","watch","ready","isReady","this","patient","getID","getFields","immediate","deep","methods","formData","computedData","encounter","createEncounter","toastWarning","registrationData","resolveObs","registrationObs","saveObservationList","$router","push","id","helpText","type","FieldType","TT_SELECT","validation","value","Validation","required","computedValue","v","obs","buildValueCoded","options","label","buildValueText","condition","referral","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","__exports__"],"mappings":"uIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,MAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,sBAAuBV,EAAKW,kBAC5BC,OAAQZ,EAAKY,OACbC,eAAgBb,EAAKc,UACpB,KAAM,EAAG,CAAC,wBAAyB,SAAU,mB,wCCP5C,MAAOC,UAAgCC,OACzCC,YAAYC,EAAmBC,GAC3BC,MAAMF,EAAW,GAAIC,I,oDCOdE,+BAAgB,CAC3BC,WAAY,CAAEC,wBACdC,OAAQ,CAACC,QACTC,KAAM,KAAM,CACRC,iBAAkB,KAEtBC,MAAO,CACHC,MAAO,CACH,cAAcC,GACPA,IACCC,KAAKJ,iBAAmB,IAAIZ,EAAwBgB,KAAKC,QAAQC,QAASF,KAAKZ,YAC/EY,KAAKnB,OAASmB,KAAKG,cAG3BC,WAAW,EACXC,MAAM,IAGdC,QAAS,CACL,eAAeC,EAAeC,GAC1B,MAAMC,QAAkBT,KAAKJ,iBAAiBc,kBAC9C,IAAKD,EAAW,OAAOE,eAAa,2CAEpC,MAAMC,QAAyBZ,KAAKa,WAAW,IAAIL,IAC7CM,QAAwBd,KAAKJ,iBAAiBmB,oBAAoBH,GACxE,IAAKE,EAAiB,OAAOH,eAAa,+BAE1CX,KAAKgB,QAAQC,KAAK,6CAA6CjB,KAAKb,YAGxEgB,YACI,MAAO,CACH,CACIe,GAAI,WACJC,SAAU,+DACVC,KAAMC,OAAUC,UAChBC,WAAaC,GAAeC,OAAWC,SAASF,GAChDG,cAAgBC,IAAD,CAAkBC,IAAK7B,KAAKJ,iBAAiBkC,gBAAgB,uBAAwBF,EAAEJ,SACtGO,QAAS,IACE,CACH,CAAEC,MAAO,MAAOR,MAAO,OACvB,CAAEQ,MAAO,KAAMR,MAAO,QAIlC,CACIN,GAAI,0BACJC,SAAU,gBACVC,KAAMC,OAAUC,UAChBC,WAAaC,GAAeC,OAAWC,SAASF,GAChDG,cAAe,EAAGK,YAAH,CAAyBH,IAAK7B,KAAKJ,iBAAiBqC,eAAe,gBAAiBD,KACnGE,UAAYrD,GAA0C,QAA1BA,EAAOsD,SAASX,MAC5CO,QAAS,CAACK,EAAQC,EAAO,KAAOC,eAAcD,GAC9CE,OAAQ,CACJC,cAAc,EACdC,oBAAoB,S,qBC7D5C,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS1E,KAErD","file":"js/chunk-2d210591.57dded2d.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class PatientReceptionService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 80, providerID) \n    }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientReceptionService } from \"@/apps/Registration/services/patient_reception_service\"\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { toastWarning } from '@/utils/Alerts';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        receptionService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.receptionService = new PatientReceptionService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            const encounter = await this.receptionService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create registration encounter')\n            \n            const registrationData = await this.resolveObs({...computedData})\n            const registrationObs = await this.receptionService.saveObservationList(registrationData)\n            if (!registrationObs) return toastWarning('Unable to save observations')\n\n            this.$router.push(`/registration/encounters/patient_services/${this.patientID}`);\n        },\n        \n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'referral',\n                    helpText: 'Is the Patient a Referral Case From Another Health Facility?',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: (v: Option) => ({ obs: this.receptionService.buildValueCoded('Is patient referred?', v.value)}),\n                    options: () => {\n                        return [\n                            { label: 'Yes', value: 'Yes' },\n                            { label: 'No', value: 'No' },\n                        ]\n                    }\n                },\n                {\n                    id: 'referring_facility_name',\n                    helpText: 'Referred from',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ label }: Option) => ({obs: this.receptionService.buildValueText('Referred from', label)}),\n                    condition: (fields: any) => fields.referral.value === 'Yes',\n                    options: (_: any, filter='') => getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./OutpatientReception.vue?vue&type=template&id=97d026d8&ts=true\"\nimport script from \"./OutpatientReception.vue?vue&type=script&lang=ts\"\nexport * from \"./OutpatientReception.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}