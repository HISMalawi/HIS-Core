{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ANC/Views/DataManagement/AncDrugSet.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","key","hisFormKey","activeField","fieldComponent","skipSummary","fields","onOnIndex","$event","onOnFinish","onFinish","_","defineComponent","components","HisStandardForm","IonPage","data","allDrugs","service","created","this","getFields","methods","computedData","AncDrugSetService","saveDrugSet","toastSuccess","$router","back","toastWarning","e","id","helpText","type","FieldType","TT_TEXT","computedValue","v","value","validation","Validation","validateSeries","required","match","TT_MULTIPLE_SELECT","config","showKeyboard","options","async","isEmpty","DrugService","getDrugs","map","d","label","name","other","TT_ANC_DRUGSET_INPUT","quantity","frequency","every","Boolean","fdata","drug_selection","drugFrequencies","Object","keys","DRUG_FREQUENCIES","k","__exports__","AncTreatmentService","AppEncounterService","constructor","patientID","providerID","ttvDrugObj","date","dispensed","dispenseTTV","orderID","order_id","DrugOrderService","updateDispensationOrders","createOrders","orders","create","getEncounterID","drugs","createEncounter","o","buildDrugOrderObj","dispensation","forEach","duration","order","drug_inventory_id","drug","startDate","Date","expiryDate","setDate","getDate","parseInt","dose","dailyEquivalentDose","parseFloat","HisDate","toStandardHisFormat","drug_name","units","Service","drugSet","getSessionDate","postJson","setID","void","getJson","reduce","sets","setKey","description","push","a"],"mappings":"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","file":"js/chunk-0ced981c.16c63a5e.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        key: _ctx.hisFormKey,\n        activeField: _ctx.fieldComponent,\n        skipSummary: true,\n        fields: _ctx.fields,\n        onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n        onOnFinish: _ctx.onFinish\n      }, null, 8, [\"activeField\", \"fields\", \"onOnFinish\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {\n    IonPage\n} from \"@ionic/vue\"\nimport { isEmpty } from 'lodash';\nimport { DrugService } from '@/services/drug_service';\nimport { DRUG_FREQUENCIES } from \"@/apps/ANC/Services/anc_treatment_service\";\nimport { NewDrugSet, AncDrugSetService } from \"@/apps/ANC/Services/anc_drug_set\";\nimport { toastSuccess, toastWarning } from '@/utils/Alerts';\n\nexport default defineComponent({\n    components: { HisStandardForm, IonPage },\n    data: () => ({\n        hisFormKey: 0 as number,\n        fields: [] as Array<Field>,\n        allDrugs: [] as Array<Option>,\n        fieldComponent: '' as string,\n        service: {} as any\n    }),\n    created() {\n        this.fields = this.getFields()\n    },\n    methods: {\n        async onFinish(_: any, computedData: NewDrugSet) {\n            try {\n                if ((await AncDrugSetService.saveDrugSet(computedData))) {\n                    toastSuccess('Drugset saved successfully');\n                    return this.$router.back()\n                }\n                toastWarning('Unable to save drugset')\n            } catch (e) {\n                toastWarning(`${e}`)\n            }\n        },\n        getFields() {\n            return [\n                {\n                    id: 'name',\n                    helpText: 'Enter drug set name',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (v: Option) => v.value,\n                    validation: (v: Option) => Validation.validateSeries([\n                        () => Validation.required(v),\n                        () => !`${v.value}`.match(/^([a-zA-Z_ ]{2,17})'?-?([a-zA-Z_ ]{1,17})$/)\n                            ? ['Enter a valid drug set name.']\n                            : null\n                    ]),\n\n                },\n                {\n                    id: 'description',\n                    helpText: 'Drug set description',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (v: Option) => v.value,\n                    validation: (v: Option) => Validation.validateSeries([\n                        () => Validation.required(v),\n                        () => !`${v.value}`.match(/^([a-zA-Z_ ]{2,100})'?-?([a-zA-Z_ ]{1,100})$/)\n                            ? ['Enter a valid drug set description']\n                            : null\n                    ]) \n                },\n                {\n                    id: 'drug_selection',\n                    helpText: 'Select drugs to add',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (v: Option[]) => Validation.required(v),\n                    config: {\n                        showKeyboard: true\n                    },\n                    options: async () => {\n                        if (isEmpty(this.allDrugs)) {\n                            this.allDrugs = (await DrugService.getDrugs({\n                                'page_size': 1000\n                            })).map((d: any) => ({\n                                label: d.name,\n                                value: d.id,\n                                other: {\n                                    'drug': d.name,\n                                    'quantity': 0,\n                                    'frequency': '',\n                                }\n                            }))\n                        }\n                        return this.allDrugs as Option[]\n                    }\n                },\n                {\n                    id: 'drugs',\n                    helpText: 'Set drugs',\n                    type: FieldType.TT_ANC_DRUGSET_INPUT,\n                    computedValue: (v: Option[]) => v.map(d => d.other), \n                    validation: (v: Option[]) => Validation.validateSeries([\n                        () =>  Validation.required(v),\n                        () => !v.map(d => d.other.quantity && d.other.frequency).every(Boolean)\n                                ? ['Data is not complete']\n                                : null\n                    ]),\n                    options: (fdata: any) => fdata.drug_selection as Option[],\n                    config: {\n                        drugFrequencies: Object.keys(DRUG_FREQUENCIES)\n                            .map((k: string) => ({ label: k, value: k }))\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./AncDrugSet.vue?vue&type=template&id=a2705bc2&ts=true\"\nimport script from \"./AncDrugSet.vue?vue&type=script&lang=ts\"\nexport * from \"./AncDrugSet.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"@/services/service\";\n\nexport interface AncDrugSetDrugs {\n    drug: number;\n    drug_name?: string;\n    quantity: number;\n    duration?: number;\n    frequency: string;\n}\n\nexport interface NewDrugSet {\n    id?: number;\n    datetime?: string;\n    name: string;\n    description: string;\n    drugs: AncDrugSetDrugs[];\n}\n\nexport class AncDrugSetService extends Service {\n    static saveDrugSet(drugSet: NewDrugSet) {\n        const data  = {...drugSet}\n        data['datetime'] = Service.getSessionDate()\n        return this.postJson('/drug_sets', drugSet)\n    }\n\n    static voidDrugSet(setID: number) {\n        return this.void(`/drug_sets/${setID}`, { date: this.getSessionDate()})\n    }\n\n    static async getDrugSets() {\n        const data = await this.getJson('drug_sets')\n        if (data) {\n            return Object.keys(data['set_names'])\n                .reduce((sets: Array<any>, setKey: string) => {\n                    const name = data['set_names'][setKey]\n                    const description = data['set_descriptions'][setKey]\n                    const drugs = data['drug_sets'][setKey]\n                    sets.push({\n                        id: parseInt(setKey),\n                        name,\n                        description,\n                        drugs: Object.keys(drugs).reduce(\n                            (a: any, k: string) => [\n                                ...a, { \n                                    'id': parseInt(k), ...drugs[k],\n                                    'drug_name': drugs[k].drug_name,\n                                    'duration': parseInt(drugs[k].duration),\n                                    'frequency': drugs[k].frequency,\n                                    'units': drugs[k].units,\n                                }], []\n                        )\n                    })\n                    return sets\n                }, [])\n        }\n        return []\n    }\n}"],"sourceRoot":""}