{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/ARTStock/movement.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","activeField","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","DHAVerificationService","constructor","BASE30_DIGITS_INDEX","this","BASE30_DIGITS","split","forEach","digit","decimalValue","convertFromDecimal","number","toBase","result","Math","floor","digits","toString","map","Number","parseInt","parity","length","sum","position","checksum","isValidDHACode","code","decimalCode","convertToDecimal","computedCheckDigit","calculateLuhnCheckDigit","exception","console","error","undefined","slice","defineComponent","components","HisStandardForm","data","drugs","selectedDrugs","barcode","stockService","methods","formData","enter_batches","errors","index","d","value","packSize","StockService","getPackSize","drug_id","total","tins","extras","res","authorization","quantity","reason","reasons","task","relocation_location","f","relocateItems","pharmacy_batch_id","push","getShortName","disposeItems","e","BadRequestError","isEmpty","concat","log","toastSuccess","$router","toastDanger","join","getFields","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","label","notTheSame","getLocationName","condition","_","filter","getFacilities","computedValue","config","showKeyboard","isFilterDataViaApi","dynamicHelpText","TT_FULL_DATE","TT_MULTIPLE_SELECT","requireNext","async","checked","items","getItems","i","isChecked","c","unload","TT_BATCH_MOVEMENT","beforeNext","currentFieldContext","drugsToStr","b","partialEntries","drug","entries","every","Boolean","partialDrugs","toastWarning","TT_TEXT","customKeyboard","CHARACTERS_AND_NUMBERS_LO","v","dha","toUpperCase","formdata","getReasons","TT_TABLE_VIEWER","buildResults","hiddenFooterBtns","isRelocation","columns","rows","j","HisDate","toStandardHisDisplayFormat","expiry","other","prepDrugs","element","batchNumber","drugID","tabs","date","selectAll","listData","l","formatDrugs","mapVal","vals","expiry_date","batch_number","created","__exports__"],"mappings":"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","file":"js/chunk-2d0d5c2c.ec7355bc.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nexport class DHAVerificationService {\n\n\tBASE30_DIGITS_INDEX = {} as any;\n\tBASE30_DIGITS: any;\n\t// static BASE30_DIGITS: any;\n\tconstructor() {\n\n\t\tthis.BASE30_DIGITS = '0123456789ABCDEFGHJKLMNPRTVWXY'.split('');\n\t\tthis.BASE30_DIGITS.forEach((digit: any, decimalValue: any) => this.BASE30_DIGITS_INDEX[digit] = decimalValue);\n\t}\n\n\t//   BASE30_DIGITS.forEach((digit, decimalValue) => BASE30_DIGITS_INDEX[digit] = decimalValue);\n\tconvertFromDecimal(number: any, toBase = 30) {\n\t\tif (toBase < 2 || toBase > 30) throw (\"Invalid base ${toBase}\");\n\n\t\tlet result = '';\n\n\t\twhile (number > 0) {\n\t\t\tresult = this.BASE30_DIGITS[number % toBase] + result;\n\t\t\tnumber = Math.floor(number / toBase);\n\t\t}\n\n\t\treturn result;\n\t}\n\tstatic calculateLuhnCheckDigit(number: any) {\n\t\tconst digits = number.toString().split('').map((digit: string) => Number.parseInt(digit, 10));\n\t\tconst parity = digits.length % 2;\n\n\t\tlet sum = 0;\n\n\t\tdigits.forEach((digit: any, position: any) => {\n\t\t\tif (position % 2 === parity) digit *= 2;\n\t\t\tif (digit > 9) digit -= 9;\n\n\t\t\tsum += digit;\n\t\t});\n\n\t\tconst checksum = sum % 10;\n\t\treturn checksum === 0 ? 0 : 10 - checksum;\n\t}\n\n\t/**\n\t * @param code {String}\n\t *\n\t * @returns {Boolean}\n\t */\n\tisValidDHACode(code: any) {\n\t\ttry {\n\t\t\tconst decimalCode = this.convertToDecimal(code).toString();\n\t\t\tconst checkDigit = Number.parseInt(decimalCode[0], 10);\n\t\t\tconst computedCheckDigit = DHAVerificationService.calculateLuhnCheckDigit(Number.parseInt(decimalCode, 10) * 10);\n\t\t\treturn computedCheckDigit === 0;\n\t\t} catch (exception) {\n\t\t\tconsole.error(exception);\n\t\t\treturn false;\n\t\t}\n\t}\n\tconvertToDecimal(number: any): any {\n\t\tif (number.length == 0) return 0;\n\n\t\tconst decimalValue = this.BASE30_DIGITS_INDEX[number[0]];\n\n\t\tif (decimalValue === undefined || decimalValue === null)\n\t\t\tthrow (\"Invalid base ${fromBase} number: ${number}\");\n\n\t\treturn decimalValue * 30 ** (number.length - 1) + this.convertToDecimal(number.slice(1));\n\t}\n\n\t//   return {isValidDHACode};\n}\n// const DHACodes = (() => {\n\n//   /**\n//    * Converts any number in the DHA base 30 character set to a decimal value.\n//    * \n//    * @param number {String}\n//    * @param fromBase {Number}\n//    *\n//    * @returns Number\n//    */\n\n\n//   /**\n//    * Convert any decimal value to any base within DHA's base 30 character set.\n//    * \n//    * @param number {Number}\n//    * @param toBase {Number}\n//    *\n//    * @returns {String}\n//    */\n\n\n//   /**\n//    * Returns the Luhn checksum for given number.\n//    * \n//    * @param number {Number}\n//    * @returns {Number}\n//    */\n\n// })();\n","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { CHARACTERS_AND_NUMBERS_LO } from \"@/components/Keyboard/KbLayouts\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { DHAVerificationService } from \"@/services/DHA_code_service\"\nimport HisDate from \"@/utils/Date\";\nimport { StockService } from \"./stock_service\";\nimport { toastWarning, toastDanger, toastSuccess } from \"@/utils/Alerts\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { BadRequestError } from  \"@/services/service\"\nimport { isEmpty } from \"lodash\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any,\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      const data = formData.enter_batches;\n      let errors: string[] = [];\n      for (let index = 0; index < data.length; index++) {\n        const d = data[index].value;\n        const packSize = StockService.getPackSize(d.drug_id);\n        const total = packSize * d.tins;\n        const extras = {} as any;\n        const res = {\n          'reallocation_code': formData.authorization.value,\n          quantity: total,\n          reason: formData.reasons.value,\n        };\n        try {\n          if (formData.task.value === \"Relocations\") {\n            extras[\"location_id\"] = formData.relocation_location.value;\n            const f = await this.stockService.relocateItems(d.pharmacy_batch_id, {\n              ...res,\n              ...extras,\n            });\n            if (!f) {\n              errors.push(\n                \"Could not save record for\" + StockService.getShortName(d.drug_id)\n              );\n            }\n          } else {\n            const f = await this.stockService.disposeItems(d.pharmacy_batch_id, {\n              ...res,\n              ...extras,\n            });\n            if (!f) {\n              errors.push(\n                \"Could not save record for\" + StockService.getShortName(d.drug_id)\n              );\n            }\n          }\n        } catch (e) {\n          if (e instanceof BadRequestError && !isEmpty(e.errors)) {\n            errors = errors.concat(e.errors)\n          } else {\n            errors.push(e)\n          }\n          console.log(e)\n        }\n      }\n      if (errors.length === 0) {\n        toastSuccess(\"Stock succesfully moved\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(`${errors.join(',')}`);\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"task\",\n          helpText: \"Select task\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Relocations\",\n              value: \"Relocations\",\n            },\n            {\n              label: \"Disposal\",\n              value: \"Disposal\",\n            },\n          ],\n        },\n        {\n          id: \"relocation_location\",\n          helpText: \"Destination\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val) || Validation.notTheSame(val.label, `${StockService.getLocationName()}`),\n          condition: (val: any) => val.task.value === \"Relocations\" ,\n          options: (_: any, filter = \"\") => getFacilities(filter),\n          computedValue: (val: Option) => val.label,\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n        },\n        {\n          id: \"date\",\n          dynamicHelpText: (f) => `Date of ${f.task.label}`,\n          helpText: \"Set date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: any) => Validation.required(val),\n        },\n        {\n          id: \"select drugs\",\n          helpText: \"Select drugs\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          requireNext: true,\n          validation: (val: any) => Validation.required(val),\n          options: async (_: any, checked: Option[]) => {\n            const items: Option[] = await this.getItems()\n            return items.map((i: any) => {\n              i.isChecked = checked.filter(c => c.label === i.label).length >= 1 \n              return i\n            })\n          },\n          unload: (val: any) => (this.selectedDrugs = val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_MOVEMENT,\n          beforeNext: (_: any, f: any, c: any, {currentFieldContext}: any) => {\n            const drugsToStr = (drugs: any) => drugs.map((b: any, i: number) => `${b.label}`).join(' & ')\n            const partialEntries = currentFieldContext.drugs.filter((drug: any) =>\n              drug.entries.map((d: any) => !(d.tins)).every(Boolean)\n            )\n            if (!isEmpty(partialEntries)) {\n              const partialDrugs = drugsToStr(partialEntries)\n              toastWarning(`Please fix partial batch entries for drugs: ${partialDrugs}`)\n              return false\n            }\n            return true\n          },\n          options: () => this.selectedDrugs,\n          validation: (val: any) => Validation.required(val),\n        },\n        {\n          id: \"authorization\",\n          helpText: \"Enter authorization code\",\n          type: FieldType.TT_TEXT,\n          config: {\n            customKeyboard: [CHARACTERS_AND_NUMBERS_LO, [['Delete']]]\n          },\n          validation: (v: Option) => {\n          if (!v || v && !v.value) {\n            return null\n          }\n          const value = v.value as string\n          const dha = new DHAVerificationService()\n          return !dha.isValidDHACode(value.toUpperCase())\n            ? ['Invalid authorization code']\n            : null  \n          }, \n        },\n        {\n          id: \"reasons\",\n          helpText: \"Select reason\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (formdata: any) => this.getReasons(formdata),\n        },\n        {\n          id: \"summary\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(formData: any) {\n      const isRelocation = formData.task.value === 'Relocations'\n      const columns = [\n        \"Drug\",\n        \"Total units\",\n        \"Expiry date\",\n        \"Authorization code\",\n      ];\n\n      if (isRelocation) columns.push('Relocation')\n\n      const rows = formData.enter_batches.map((j: any) => {\n        const d = j.value;\n        const data = [\n          StockService.getShortName(d.drug_id),\n          d.tins,\n          HisDate.toStandardHisDisplayFormat(d.expiry),\n          formData.authorization.value.toUpperCase()\n        ]\n        if (isRelocation) data.push(formData.relocation_location.label)\n        return data\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    prepDrugs(formdata: any) {\n      const items: any[] = [];\n      const barcode = this.barcode;\n      formdata.enter_batches.value.forEach((element: any) => {\n        items.push({\n          'batch_number': element.batchNumber,\n          'items': [\n            {\n              'barcode': barcode,\n              'drug_id': element.drugID,\n              'expiry_date': element.expiry,\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\n              'delivery_date': formdata.date.value,\n            },\n          ],\n        });\n      });\n      return items;\n    },\n    selectAll(listData: Array<Option>) {\n      return listData.map((l) => {\n        l.isChecked = true;\n        return l;\n      });\n    },\n    async getItems() {\n      const f = await this.stockService.getItems();\n      return this.formatDrugs(f);\n    },\n    mapVal(vals: string[]) {\n      return vals.map((data) => {\n        return { label: data, value: data };\n      });\n    },\n    getReasons(formdata: any): any {\n      if (formdata.task.value === \"Relocations\") {\n        return this.mapVal([\n          \"Transfer to another facility/relocation\",\n          \"For trainings\",\n        ]);\n      } else {\n        return this.mapVal([\"Expired\", \"Damaged\", \"Phased out\", \"Banned\", \"Missing\"]);\n      }\n    },\n    formatDrugs(f: any) {\n      return f.map((drug: any) => {\n        return {\n          label: `${StockService.getShortName(\n            drug.drug_id\n          )} (${StockService.getPackSize(\n            drug.drug_id\n          )}) Expiry date: ${HisDate.toStandardHisDisplayFormat(\n            drug.expiry_date\n          )} \n          Batch (${drug.batch_number})\n          `,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n  },\n});\n","import { render } from \"./movement.vue?vue&type=template&id=95ecedf8&ts=true\"\nimport script from \"./movement.vue?vue&type=script&lang=ts\"\nexport * from \"./movement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}