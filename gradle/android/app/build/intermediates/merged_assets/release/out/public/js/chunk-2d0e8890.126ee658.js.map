{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","activeField","onFinishAction","onFinish","skipSummary","onOnIndex","$event","cancelDestinationPath","cancelDestination","defineComponent","components","HisStandardForm","data","drugs","selectedDrugs","barcode","stockService","methods","formData","items","this","prepDrugs","f","postItems","toastSuccess","$router","push","toastDanger","getFields","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","label","value","condition","transfer_origination","_","filter","getFacilities","computedValue","config","showKeyboard","isFilterDataViaApi","TT_BARCODE","hiddenFooterBtns","onValue","async","TT_MULTIPLE_SELECT","requireNext","unload","footerBtns","name","slot","onClick","selectAll","TT_FULL_DATE","TT_BATCH_ENTRY","beforeNext","c","currentFieldContext","drugsToStr","map","b","i","join","drugsWithoutBatches","drug","entries","d","tins","expiry","batchNumber","every","Boolean","partialBatches","e","score","some","isEmpty","partialDrugs","toastWarning","batchlessDrugs","v","TT_TABLE_VIEWER","buildResults","enter_batches","columns","rows","j","shortName","tabs","HisDate","toStandardHisDisplayFormat","other","formdata","location","transfer_location","forEach","el","element","drugID","parseInt","date","listData","l","isChecked","formatDrugs","drugList","created","StockService","__exports__"],"mappings":"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","file":"js/chunk-2d0e8890.126ee658.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.activeField='')),\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport HisDate from \"@/utils/Date\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { StockService } from \"./stock_service\";\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { isEmpty } from \"lodash\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any,\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      const items = this.prepDrugs(formData);\n      const f = await this.stockService.postItems(items);\n      if (f) {\n        toastSuccess(\"Stock succesfully added\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(\"Could not save stock\");\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"transfer_origination\",\n          helpText: \"Select where stock came from\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          options: () => [\n            {\n              label: \"DHA\",\n              value: \"DHA\",\n            },\n            {\n              label: \"Other location\",\n              value: \"Other location\",\n            },\n          ],\n        },\n        {\n          id: \"transfer_location\",\n          helpText: \"Location\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          condition: (val: any) => val.transfer_origination.value === \"Other location\",\n          options: (_: any, filter = \"\") => getFacilities(filter),\n          computedValue: (val: Option) => val.label,\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n        },\n        {\n          id: \"barcode\",\n          helpText: \"Scan barcode\",\n          type: FieldType.TT_BARCODE,\n\n          config: {\n            hiddenFooterBtns: [\"Clear\", \"Next\"],\n          },\n          onValue: async (id: string) => {\n            this.barcode = id;\n            this.activeField = \"select drugs\";\n          },\n        },\n        {\n          id: \"select drugs\",\n          helpText: \"Select drugs\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          requireNext: true,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.drugs,\n          unload: (val: any) => (this.selectedDrugs = val),\n          config: {\n            showKeyboard: true,\n            footerBtns: [\n              {\n                name: \"Select all\",\n                slot: \"end\",\n                onClick: () => {\n                  this.selectAll(this.drugs);\n                },\n              },\n            ],\n          },\n        },\n        {\n          id: \"date\",\n          helpText: \"Delivery Date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: Option) => Validation.required(val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_ENTRY,\n          options: () => this.selectedDrugs,\n          beforeNext: (_: any, f: any, c: any, {currentFieldContext}: any) => {\n            const drugsToStr = (drugs: any) => drugs.map((b: any, i: number) => `${b.label}`).join(' & ')\n            const drugsWithoutBatches = currentFieldContext.drugs.filter((drug: any) =>\n              drug.entries.map((d: any) => !d.tins && !d.expiry && !d.batchNumber).every(Boolean)\n            )\n            const partialBatches = currentFieldContext.drugs.filter((drug: any) => {\n              return drug.entries.map((e: any) => {\n                let score = 0\n                if (e.tins) score += 1\n                if (e.expiry) score += 1\n                if (e.batchNumber) score += 1\n                return score >= 1 && score <= 2 \n              }).some(Boolean)\n            })\n            if (!isEmpty(partialBatches)) {\n              const partialDrugs = drugsToStr(partialBatches)\n              toastWarning(`Please fix partial batch entries for drugs: ${partialDrugs}`)\n              return false\n            }\n            if (!isEmpty(drugsWithoutBatches)) {\n              const batchlessDrugs = drugsToStr(drugsWithoutBatches)\n              toastWarning(`The following drug batches are empty: ${batchlessDrugs}`)\n              return false\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"adherence_report\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d.enter_batches),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(d: any) {\n      const columns = [\n        \"Drug\",\n        \"Amount per unit\",\n        \"Total units\",\n        \"Expiry date\",\n        \"Batch number\",\n      ];\n      const rows = d.map((j: any) => {\n        const d = j.value;\n        return [\n          d.shortName,\n          d.tabs,\n          d.tins,\n          HisDate.toStandardHisDisplayFormat(d.expiry),\n          d.batchNumber,\n        ];\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    prepDrugs(formdata: any) {\n      const items: any[] = [];\n      const barcode = this.barcode;\n      const location = formdata.transfer_origination.value === \"DHA\" ? null : formdata.transfer_location.value;\n      formdata.enter_batches.forEach((el: any) => {\n        const element = el.value;\n        items.push({\n          'batch_number': element.batchNumber,\n          'location_id': location,\n          items: [\n            {\n              'barcode': barcode,\n              'drug_id': element.drugID,\n              'expiry_date': element.expiry,\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\n              'delivery_date': formdata.date.value,\n            },\n          ],\n        });\n      });\n      return items;\n    },\n    selectAll(listData: Array<Option>) {\n      return listData.map((l) => {\n        l.isChecked = true;\n        return l;\n      });\n    },\n    formatDrugs() {\n      return this.stockService.drugList().map((drug: any) => {\n        return {\n          label: drug.shortName,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n    this.drugs = this.formatDrugs();\n  },\n});\n","import { render } from \"./enter_receipts.vue?vue&type=template&id=cbb12de8&ts=true\"\nimport script from \"./enter_receipts.vue?vue&type=script&lang=ts\"\nexport * from \"./enter_receipts.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}