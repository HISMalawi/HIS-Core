{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","AssessmentService","AppEncounterService","constructor","patientID","providerID","super","this","hivStatus","artStatus","arvNumber","arvStartDate","getHivStatus","getArtStatus","getArvNumber","getArvStartDate","isHivPositive","match","res","getJson","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","assessment","obs","showHIVQuestions","offerCxCa","watch","patient","loadArtStatus","setOfferCxCa","getFields","deep","methods","formData","computed","encounter","createEncounter","toastWarning","vals","Object","keys","forEach","element","push","Promise","all","saveObservationList","toastSuccess","nextTask","getFirstValueCoded","buildValueCoded","hasHIVStatus","enterPreviousCxCaData","everHadCxCa","ever_had_cxca","value","resultsAvailable","results_available","getFacilities","filter","getReasonsForNoCxcaOptions","ConceptService","getConceptsByCategory","map","c","label","name","other","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","computedValue","condition","generateDateFields","hiv_status","minDate","getBirthdate","maxDate","getDate","estimation","allowUnknown","computeValue","date","isEstimate","tag","buildValueDate","reason_for_visit","yesNoOptions","_","config","showKeyboard","isFilterDataViaApi","buildValueText","offer_CxCa","__exports__"],"mappings":"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","file":"js/chunk-2d226508.58583ab4.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class AssessmentService extends AppEncounterService {\n    \n    hivStatus: string;\n    artStatus: string;\n    arvNumber: string;\n    arvStartDate: string;\n    constructor(patientID: number, providerID: number){\n        super(patientID, 181, providerID) //TODO: Use encounter type reference name'\n        this.hivStatus = ''\n        this.artStatus = ''\n        this.arvNumber = ''\n        this.arvStartDate = ''\n    }\n\n    getHivStatus() {\n        return this.hivStatus\n    }\n\n    getArtStatus() {\n        return this.artStatus\n    }\n\n    getArvNumber() {\n        return this.arvNumber\n    } \n\n    getArvStartDate() {\n        return this.arvStartDate\n    }\n\n    isHivPositive() {\n        return this.hivStatus.match(/positive/i) ? true : false\n    }\n\n    async loadArtStatus() {\n        const res = await AppEncounterService.getJson(`programs/12/patients/${this.patientID}/art_hiv_status`)\n        if (res) {\n            this.hivStatus = res['hiv_status'] || this.hivStatus\n            this.artStatus = res['art_status'] || ''\n            this.arvNumber = res['arv_number'] || ''\n            this.arvStartDate = res['arv_start_date'] || ''\n        }\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { AssessmentService } from \"@/apps/CxCa/services/CxCaAssessmentService\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { ConceptService } from \"@/services/concept_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    assessment: {} as any,\n    obs: [] as any,\n    showHIVQuestions: true,\n    offerCxCa: false,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.assessment = new AssessmentService(\n          this.patientID,\n          this.providerID\n        );\n        await this.assessment.loadArtStatus();\n        if (this.assessment.getHivStatus() !== '') {\n          this.showHIVQuestions = false;\n        }\n        await this.setOfferCxCa();\n        this.fields = await this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computed: any) {\n      \n      const encounter = await this.assessment.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...this.obs, ...vals]);\n\n      const obs = await this.assessment.saveObservationList(data);\n\n      if (!obs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      this.nextTask();\n    },\n    async setOfferCxCa() {\n      const data = await this.assessment.getFirstValueCoded(\"Offer CxCa\");\n      this.offerCxCa = data && data === \"Yes\";\n      if (!this.offerCxCa) {\n        this.obs.push(this.assessment.buildValueCoded(\"Ever had CxCa\", \"No\"));\n      }\n      return true;\n    },\n    hasHIVStatus() {\n      return this.assessment.getHivStatus !== \"\"\n    },\n    enterPreviousCxCaData(formData: any) {\n      const everHadCxCa = formData.ever_had_cxca.value === \"Yes\";\n      const resultsAvailable = formData.results_available.value === \"Yes\";\n      return everHadCxCa && resultsAvailable;\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    getReasonsForNoCxcaOptions() {\n      return ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n        .map((c: any) => ({\n          label: c.name,\n          value: c.name,\n          other: {\n            c\n          }\n        }))\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"reason_for_visit\",\n          helpText: \"Reason for visit\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Initial screening\",\n              value: \"Initial screening\",\n            },\n            {\n              label: \"Postponed treatmment\",\n              value: \"Postponed treatment\",\n            },\n            {\n              label: \"One year subsequent check-up after treatment\",\n              value: \"One year subsequent check-up after treatment\",\n            },\n            {\n              label: \"Subsequent screening\",\n              value: \"Subsequent screening\",\n            },\n            {\n              label: \"Problem visit after treatment\",\n              value: \"Problem visit after treatment\",\n            },\n            {\n              label: \"Referral\",\n              value: \"Referral\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for visit\", value.value)\n          })\n        },\n        {\n          id: \"hiv_status\",\n          helpText: \"HIV status\",\n          type: FieldType.TT_SELECT,\n          condition: () => this.showHIVQuestions,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Positive on ART\",\n              value: \"Positive on ART\",\n            },\n            {\n              label: \"Positive Not on ART\",\n              value: \"Positive Not on ART\",\n            },\n            {\n              label: \"Negative\",\n              value: \"Negative\",\n            },\n            {\n              label: \"Never tested\",\n              value: \"Never tested\",\n            },\n            {\n              label: \"Prefers Not to disclose\",\n              value: \"Undisclosed\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"HIV status\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"hiv_test_date\",\n            helpText: \"HIV test result date\",\n            required: true,\n            condition: (formData: any) =>\n              formData.hiv_status.value.match(/Negative|ART/i),\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            estimation: {\n              allowUnknown: false,\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"HIV test date\", date),\n              };\n            },\n          },\n          this.assessment.getDate()\n        ),\n        {\n          id: \"ever_had_cxca\",\n          helpText: \"Ever had CxCa screening\",\n          type: FieldType.TT_SELECT,\n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\",\n          options: () => this.yesNoOptions(),\n          validation: (val: any) => Validation.required(val),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Ever had CxCa\", value.value)\n          })\n        },\n        {\n          id: \"results_available\",\n          helpText: \"Results available?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          \n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\" && formData.ever_had_cxca.value !== \"No\",\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa test results\", value.value)\n          })\n        },\n        {\n          id: \"location\",\n          helpText: \"CxCa screening location\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (_: any, filter = \"\") => this.getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueText(\"Previous CxCa location\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"cxca_date\",\n            helpText: \"Previous CxCa test\",\n            required: true,\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            estimation: {\n              allowUnknown: false,\n            },\n            condition: (formData: any) => this.enterPreviousCxCaData(formData),\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"cxca test date\", date),\n              };\n            },\n          },\n          this.assessment.getDate()\n        ),\n        {\n          id: \"previous_screening_method\",\n          helpText: \"Previous screening method\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Previous CxCa screening method\", value.value)\n          })\n        },\n        {\n          id: \"offer_CxCa\",\n          helpText: \"Offer CxCa screening today\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Offer CxCa\", value.value)\n          })\n        },\n        {\n          id: \"screening_method\",\n          helpText: \"Screening method being offered\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"Yes\",\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa screening method\", value.value)\n          }),\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa screening\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"No\",\n          options: () => this.getReasonsForNoCxcaOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for NOT offering CxCa\", value.value)\n          }),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTest.vue?vue&type=template&id=52f44ce7&ts=true\"\nimport script from \"./CxCaTest.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTest.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}