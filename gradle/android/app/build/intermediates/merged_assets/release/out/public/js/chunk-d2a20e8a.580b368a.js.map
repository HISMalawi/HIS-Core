{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ANC/Views/Reports/Pepfar/AncPepfarDisaggregated.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","title","period","rows","fields","columns","config","showIndex","onReportConfiguration","onPeriod","_","AncPepfarReportService","AncReportService","generateDisaggregated","date","getJson","getProgramID","defineComponent","mixins","ReportMixin","components","ReportTemplate","IonPage","data","table","thTxt","months","0","1","2","3","4","5","6","7","8","9","10","11","ageGroups","indicators","drillPatients","created","this","report","getDateDurationFields","AncReportComposable","methods","f","d","dayjs","format","c","start_date","end_date","monthlyDates","generateIndicatorDates","generateRows","startDate","endDate","dates","add","push","forEach","indicator","age","patients","td","getLocationName","month","year","tdLink","length","e","console","warn","__exports__","router","useRouter","fd","HisDate","toStandardHisDisplayFormat","showPrintWindow","params","content","document","getElementById","containerID","toPDFfromHTML","cssFile","innerHTML","async","drillPatientByIDs","ids","modalController","create","component","DrilldownTable","cssClass","componentProps","exportable","rowParser","map","patient","Patientservice","findByID","id","getNationalID","getGivenName","getFamilyName","tdDate","getBirthdate","toString","tdBtn","dismiss","path","Promise","all","showFilters","rowsPerPage","paginated","showReportStamp","footerColor","onFinish","present","getMonthlyReportFields","helpText","type","FieldType","TT_NUMBER","computedValue","v","value","validation","isPlainObject","Validation","validateSeries","required","isNaN","parseInt","rangeOf","getYear","Service","getSessionDate","TT_SELECT","options","label"],"mappings":"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","file":"js/chunk-d2a20e8a.580b368a.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_report_template = _resolveComponent(\"report-template\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_report_template, {\n        title: _ctx.title,\n        period: _ctx.period,\n        rows: _ctx.rows,\n        fields: _ctx.fields,\n        columns: _ctx.columns,\n        config: {\n                showIndex: true\n            },\n        onReportConfiguration: _ctx.onPeriod\n      }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"onReportConfiguration\"])\n    ]),\n    _: 1\n  }))\n}","import Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { FieldType } from '@/components/Forms/BaseFormElements'\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { isPlainObject } from 'lodash'\nimport HisDate from \"@/utils/Date\"\nimport { Service } from \"@/services/service\"\nimport { modalController } from \"@ionic/vue\"\nimport DrilldownTable from \"@/apps/ART/views/reports/BasicReportTemplate.vue\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { useRouter } from \"vue-router\"\nimport { toPDFfromHTML } from \"@/utils/Export\"\n\nexport interface WindowPrintParamInterface {\n    containerID: string;\n    cssFile: string;\n}\n\nexport function AncReportComposable() {\n    const router = useRouter()\n    // Short function name for formating dates\n    function fd(date: string) {\n        return HisDate.toStandardHisDisplayFormat(date)\n    }\n\n    function showPrintWindow(params: WindowPrintParamInterface) {\n        const content = document.getElementById(params.containerID)\n        if (content) {\n            toPDFfromHTML(`\n                <html>\n                <head>\n                    <title>Print Cohort</title>\n                    <style> \n                    ${params.cssFile}\n                    </style>\n                </head>\n                <body>\n                    ${content.innerHTML}\n                </body>\n                </html>\n            `)\n        }\n    }\n\n    async function drillPatientByIDs(title: string, ids: number[]) {\n        (await modalController.create({\n            component: DrilldownTable,\n            cssClass: 'large-modal',\n            componentProps: { \n                title, \n                rows: ids,\n                columns: [\n                    [\n                        table.thTxt('National ID'),\n                        table.thTxt('First name', {exportable: false}),\n                        table.thTxt('Last name', {exportable: false}),\n                        table.thTxt('Birth date'),\n                        table.thTxt('Action')\n                    ]\n                ], \n                rowParser: async (rows: any) => {\n                    const patients = rows.map(async(id: any) => {\n                        const patient = new Patientservice((await Patientservice.findByID(id)))\n                        return [\n                            table.td(patient.getNationalID()),\n                            table.td(patient.getGivenName()),\n                            table.td(patient.getFamilyName()),\n                            table.tdDate(patient.getBirthdate().toString()),\n                            table.tdBtn('Show', async()=>{\n                                await modalController.dismiss({})\n                                router.push({ path:`/patient/dashboard/${id}`})\n                            })\n                        ]\n                    })\n                    return await Promise.all(patients)\n                },\n                showFilters: true,\n                rowsPerPage: 50,\n                paginated: true,\n                showReportStamp: false,\n                footerColor: 'light',\n                onFinish: () => modalController.dismiss()\n            }\n        })).present()\n    }\n\n    function getMonthlyReportFields() {\n        return [\n            {\n                id: 'year',\n                helpText: 'Select Year',\n                type: FieldType.TT_NUMBER,\n                computedValue: (v: Option) => v.value,\n                validation: (v: Option) => {\n                    const year = isPlainObject(v) ? v.value : -1\n                    return Validation.validateSeries([\n                        () => Validation.required(v),\n                        () => {\n                            if (isNaN(parseInt(`${year}`))) {\n                                return ['Invalid year']\n                            }\n                            return null\n                        },\n                        () => Validation.rangeOf(v, 2000, HisDate.getYear(Service.getSessionDate()))\n                    ])\n                }\n            },\n            {\n                id: 'month',\n                helpText: 'Select Month',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => v.value,\n                options: () => {\n                    return [\n                        {label: 'January', value: '01'},\n                        {label: 'February', value: '02'},\n                        {label: 'March', value: '03'},\n                        {label: 'April', value: '04'},\n                        {label: 'May', value: '05'},\n                        {label: 'June', value: '06'},\n                        {label: 'July', value: '07'},\n                        {label: 'August', value: '08'},\n                        {label: 'September', value: '09'},\n                        {label: 'October', value: '10'},\n                        {label: 'November', value: '11'},\n                        {label: 'December', value: '12'}\n                    ]\n                }\n            }\n        ]\n    }\n    return {\n        fd,\n        drillPatientByIDs,\n        getMonthlyReportFields,\n        showPrintWindow\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { AncPepfarReportService } from \"@/apps/ANC/Services/anc_pepfar_report_service\"\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { IonPage } from \"@ionic/vue\"\nimport { Field } from '@/components/Forms/FieldInterface'\nimport dayjs from 'dayjs'\nimport  { AncReportComposable } from '@/apps/ANC/Views/Reports/AncReportComposable'\n\nexport default defineComponent({\n    mixins: [ReportMixin],\n    components: { ReportTemplate, IonPage },\n    data: () => ({\n        title: 'Facility Pepfar Report',\n        rows: [] as Array<any>,\n        fields: [] as Field[],\n        columns: [\n            [\n                table.thTxt('District'),\n                table.thTxt('Site'),\n                table.thTxt('Month'),\n                table.thTxt('Year') ,\n                table.thTxt('ANC Indicator'),\n                table.thTxt('Age Category'),\n                table.thTxt('Value')\n            ]\n        ],\n        months: {\n            0: \"January\", \n            1: \"February\",\n            2: \"March\",\n            3: \"April\",\n            4: \"May\",\n            5: \"June\",\n            6: \"July\",\n            7: \"August\",\n            8: \"September\",\n            9: \"October\",\n            10: \"November\",\n            11: \"December\"\n        } as any,\n        ageGroups: [\"<10\", \"10-14\", \"15-19\",\n            \"20-24\", \"25-29\", \"30-34\", \"35-39\", \"40-49\",\n            \"50+\", \"Unknown\", \"All\"\n        ] as string[],\n        indicators: [\n            \"Already on ART\", \n            \"Known at entry positive\",\n            \"Known status\", \n            \"New ANC client\", \n            \"Newly identified negative\",\n            \"Newly identified positive\",\n            \"Newly on ART\"\n        ] as string[],\n        drillPatients: null as any\n    }),\n    created() {\n        this.report = new AncPepfarReportService()\n        this.fields = this.getDateDurationFields()\n        this.drillPatients = AncReportComposable()['drillPatientByIDs']\n    },\n    methods: {\n        f(d: string) {\n            return dayjs(d).format('MMM YYYY') \n        },\n        async onPeriod(_: any, c: Record<string, any>) {\n            this.rows = []\n            this.period = `${this.f(c.start_date)} - ${this.f(c.end_date)}`\n            const monthlyDates = this.generateIndicatorDates(c.start_date, c.end_date)\n            await this.generateRows(monthlyDates)\n        },\n        generateIndicatorDates(startDate: string, endDate: string) {\n            const dates = [startDate]\n            let date = startDate\n            while(date < dayjs(endDate).add(-1, 'months').format('YYYY-MM-DD')) {\n                dates.push(date = dayjs(date).add(1, 'months').format('YYYY-MM-DD'))\n            }\n            return dates\n        },\n        async generateRows(monthlyDates: string[]) {\n            for(const date of monthlyDates) {\n                try {\n                    const data = await this.report.generateDisaggregated(date)\n                    this.indicators.forEach((indicator: string) => {\n                        this.ageGroups.forEach((age: string) => {\n                            const patients = data[this.f(date)][indicator][age]\n                            this.rows.push([\n                                table.td(''),\n                                table.td(AncPepfarReportService.getLocationName() || 'N/A'),\n                                table.td(this.months[dayjs(date).month()]),\n                                table.td(dayjs(date).year()),\n                                table.td(indicator),\n                                table.td(age),\n                                table.tdLink(patients.length, \n                                    () => this.drillPatients(`${date}-${indicator}-${age}`,patients)\n                                )\n                            ])\n                        })\n                    })\n                } catch (e) {\n                    console.warn(`${e}`)\n                }\n            }\n        }\n    }\n})\n","import { render } from \"./AncPepfarDisaggregated.vue?vue&type=template&id=13fc36ac&ts=true\"\nimport script from \"./AncPepfarDisaggregated.vue?vue&type=script&lang=ts\"\nexport * from \"./AncPepfarDisaggregated.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}