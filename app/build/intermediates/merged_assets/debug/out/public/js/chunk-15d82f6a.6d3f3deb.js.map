{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/OPD/views/encounters/Registration.vue"],"names":["LocationService","Service","constructor","type","name","parentLocation","postJson","params","getJson","conceptId","ConceptService","getConceptID","id","regionID","traditionalAuthorityID","villageID","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","PatientVisitRegistrationService","AppEncounterService","patientID","providerID","MALAWI_NATIONAL_ID_TYPE","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","registrationService","watch","ready","isReady","this","patient","getID","getFields","immediate","deep","methods","formData","computedData","asignNID","encounter","createEncounter","toastWarning","registrationData","resolveObs","registrationObs","saveObservationList","nextTask","nidAvailable","nid","value","updateMWNationalId","people","Patientservice","findByOtherID","length","helpText","FieldType","TT_SELECT","validation","Validation","required","computedValue","v","obs","buildValueCoded","options","label","buildValueText","condition","visit_type","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","getMWNationalID","yesNoUnknownOptions","appearInSummary","TT_TEXT","isMWNationalID","national_id_available","beforeNext","async","field","mwIdExists","toString","summaryMapValue","casing","isChildBearing","__exports__","facilities","f","isEmpty","map","facility","location_id","other","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","villages","village","village_id"],"mappings":"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","file":"js/chunk-15d82f6a.6d3f3deb.js","sourcesContent":["import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f))\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientVisitRegistrationService } from \"@/apps/OPD/services/patient_registration_service\"\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { toastWarning } from '@/utils/Alerts';\nimport { Patientservice } from '@/services/patient_service';\nimport { MALAWI_NATIONAL_ID_TYPE } from '@/constants';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        registrationService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.registrationService = new PatientVisitRegistrationService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            await this.asignNID(formData)\n            const encounter = await this.registrationService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create registration encounter')\n            \n            const registrationData = await this.resolveObs({...computedData})\n            const registrationObs = await this.registrationService.saveObservationList(registrationData)\n            if (!registrationObs) return toastWarning('Unable to save observations')\n\n            this.nextTask()        \n        },\n        async asignNID(formData: any) {\n            const nidAvailable = formData['national_id_available']\n            const nid = formData['national_id']\n            if(nidAvailable && nidAvailable.value === 'Yes') {\n                await this.patient.updateMWNationalId(nid.value)\n            }\n        },\n        async mwIdExists(nid: string) {\n            if(!nid) return false\n            const people = await Patientservice.findByOtherID(MALAWI_NATIONAL_ID_TYPE, nid)\n            return people.length > 0\n        },\n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'visit_type',\n                    helpText: 'Type of visit',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: (v: Option) => ({ obs: this.registrationService.buildValueCoded('Type of visit', v.value)}),\n                    options: () => {\n                        return [\n                            { label: 'New', value: 'New patient' },\n                            { label: 'Referral', value: 'Referral' },\n                            { label: 'Re-visiting', value: 'Re-visiting' },\n                        ]\n                    }\n                },\n                {\n                    id: 'referring_facility_name',\n                    helpText: 'Referred from',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ label }: Option) => ({obs: this.registrationService.buildValueText('Referred from', label)}),\n                    condition: (fields: any) => fields.visit_type.value === 'Referral',\n                    options: (_: any, filter='') => getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                {\n                    id: 'national_id_available',\n                    helpText: 'National ID Available',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    condition: () => this.patient.getMWNationalID() === 'Unknown',\n                    options: () => this.yesNoUnknownOptions(),\n                    appearInSummary: () => false\n                },\n                {\n                    id: 'national_id',\n                    helpText: 'Enter National ID',\n                    type: FieldType.TT_TEXT,\n                    validation: (value: Option) => Validation.isMWNationalID(value),\n                    condition: (fields: any) => fields.national_id_available.value === 'Yes',\n                    beforeNext: async (field: Option) => {\n                        if(field.value && (await this.mwIdExists(field.value.toString()))){\n                            toastWarning('National ID already exists')\n                            return false\n                        }\n                        return true\n                    },\n                    summaryMapValue: ({ value }: Option) => ({\n                        value,\n                        label: 'National ID'\n                    }),\n                    config: {\n                        casing: 'uppercase'\n                    }\n                },\n                {\n                    id: 'patient_pregnant',\n                    helpText: 'Patient pregnant',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({value}: Option) => ({obs: this.registrationService.buildValueCoded('PATIENT PREGNANT', value)}),\n                    condition: () => this.patient.isChildBearing(),\n                    options: () => this.yesNoUnknownOptions(),\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Registration.vue?vue&type=template&id=5ef81add&ts=true\"\nimport script from \"./Registration.vue?vue&type=script&lang=ts\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}