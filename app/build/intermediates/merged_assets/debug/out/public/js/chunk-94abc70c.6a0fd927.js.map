{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/encounters/Vitals.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","activeField","onOnskip","$event","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","app","HisApp","getActiveApp","age","gender","hasBPinfo","finalHeightValue","recentHeight","recentHeightObsID","HTNEnabled","optionWhiteList","hasHTNObs","vitals","weightForHeight","medianWeightandHeight","canEditHeight","watch","ready","this","init","patient","immediate","methods","$route","query","vital_options","VitalsService","getID","providerID","getAge","getGender","split","canCheckWeightHeight","lastHeight","getRecentHeightObs","isEmpty","patientAgeAtPrevRecordedHeight","dayjs","diff","getBirthdate","getMedianWeightHeight","ProgramService","getWeightForHeightValues","getAll","then","length","ART_PROP","htnEnabled","getFields","getOptions","options","label","value","other","modifier","icon","required","visible","filter","o","includes","map","canCheckBp","formData","encounter","createEncounter","toastWarning","obs","buildObs","observations","saveObservationList","toastSuccess","nextTask","mapObs","sanitizeVitals","element","e","on_htn_medication","buildValueText","push","splitBP","p","forEach","bpSystolic","bpDiastolic","getBMI","weight","getVal","height","currentWeightPercentile","parseFloat","toFixed","currentHeightPercentile","currentHeightRounded","Math","floor","medianWeightHeight","weightForHeightPercentile","isNaN","BMI","BMIService","calculateBMI","val","key","j","async","buildValueNumber","Promise","all","validateVitals","l","checkRequiredVitals","v","validateAll","concat","id","helpText","type","FieldType","TT_SELECT","validation","Validation","condition","applicationName","TT_VITALS_ENTRY","beforeNext","heightOption","find","enteredHeight","parseInt","prevHeight","prevHeightBtnTxt","newHeightBtnTxt","action","infoActionSheet","name","slot","color","alertConfirmation","voidObs","config","hiddenFooterBtns","onUpdateAlertStatus","weightOption","params","status","index","result","onChangeOption","activeItem","errs","validator","__exports__","AppEncounterService","constructor","patientID","super","isNotEmptyandNumber","vital","match","isNotEmptyandFloat","checkMinMax","min","max","isArray","mergeErrors","errors","holder","isValidBPReading","isValidBP","values","emptyErrors","minErrors"],"mappings":"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","file":"js/chunk-94abc70c.6a0fd927.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onOnskip: _cache[1] || (_cache[1] = $event => (_ctx.activeField = '')),\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { VitalsService } from \"@/apps/ART/services/vitals_service\";\nimport { alertConfirmation, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { BMIService } from \"@/services/bmi_service\";\nimport { ProgramService } from \"@/services/program_service\";\nimport ART_PROP from \"@/apps/ART/art_global_props\"\nimport { find, isEmpty } from \"lodash\";\nimport HisApp from \"@/apps/app_lib\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport dayjs from \"dayjs\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    app: HisApp.getActiveApp() as any,\n    activeField: \"\",\n    age: null as any,\n    gender: null as any,\n    hasBPinfo: false,\n    finalHeightValue: null as number | null,\n    recentHeight: null,\n    recentHeightObsID: -1,\n    HTNEnabled: false,\n    optionWhiteList: [] as string[],\n    hasHTNObs: false,\n    vitals: {} as any,\n    weightForHeight: {} as any,\n    medianWeightandHeight: {} as any,\n    canEditHeight: false as boolean\n  }),\n  watch: {\n    ready: {\n      async handler(ready) {\n        if (ready) await this.init(this.patient)\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async init(patient: any) {\n      const optionWhiteList = this.$route.query.vital_options as string\n      this.vitals = new VitalsService(patient.getID(), this.providerID);\n      this.age = patient.getAge();\n      this.gender = patient.getGender();\n\n      if (optionWhiteList) this.optionWhiteList = optionWhiteList.split(',')\n\n      if (this.canCheckWeightHeight()) {\n        const lastHeight = await patient.getRecentHeightObs();\n        if (!isEmpty(lastHeight)) {\n          const patientAgeAtPrevRecordedHeight = dayjs(lastHeight['obs_datetime'])\n            .diff(this.patient.getBirthdate(), 'year')\n          this.recentHeight = lastHeight['value_numeric'];\n          this.recentHeightObsID = lastHeight['obs_id'];\n          /**\n           * For a scenario where a patient's height was last updated when they were a minor\n           * and they return as an adult, provide an option to update their height.\n           */\n          this.canEditHeight = patientAgeAtPrevRecordedHeight < 18 || this.age < 18\n        } else {\n          this.canEditHeight = true\n        }\n        if (this.age <= 14) {\n          this.medianWeightandHeight = await patient.getMedianWeightHeight();\n          this.weightForHeight = await ProgramService.getWeightForHeightValues();\n        }\n      }\n      await VitalsService.getAll(patient.getID(), \"Treatment status\").then(\n        (data: any) => {\n          this.hasHTNObs = data && data.length > 0;\n        }\n      )\n      this.HTNEnabled = await ART_PROP.htnEnabled()\n      this.fields = this.getFields();\n    },\n    getOptions() {\n      const recentHeight = this.recentHeight && this.age > 18 ? this.recentHeight : \"\";\n      const options = [\n        {\n          label: \"Weight\",\n          value: \"\",\n          other: {\n            modifier: \"KG\",\n            icon: \"weight\",\n            required: true,\n          },\n        },\n        {\n          label: \"Height\",\n          value: `${recentHeight}`,\n          other: {\n            modifier: \"CM\",\n            icon: \"height\",\n            recentHeight: this.recentHeight,\n            visible: this.canEditHeight,\n            required: this.canEditHeight\n          },\n        },\n        { label: \"BP\", value: \"\", other: { modifier: \"mmHG\", icon: \"bp\" } },\n        {\n          label: \"Temp\",\n          value: \"\",\n          other: { modifier: \"°C\", icon: \"temp\" },\n        },\n        {\n          label: \"SP02\",\n          value: \"\",\n          other: { modifier: \"%\", icon: \"spo2\" },\n        },\n        {\n          label: \"Pulse\",\n          value: \"\",\n          other: { modifier: \"BPM\", icon: \"pulse-rate\" },\n        },\n        {\n          label: \"Age\",\n          value: this.age,\n          other: { modifier: \"Years old\", icon: \"\", visible: false },\n        }\n      ]\n\n      if (!isEmpty(this.optionWhiteList)) {\n        return options.filter((o: any) => this.optionWhiteList.includes(o.label))\n          .map((o: any) => {\n            o.other.required = true\n            return o\n          })\n      }\n      return options\n    },\n    canCheckWeightHeight() {\n      return isEmpty(this.optionWhiteList) || this.optionWhiteList.includes('Height') \n        && this.optionWhiteList.includes('Weight')\n    },\n    canCheckBp() {\n      return isEmpty(this.optionWhiteList) || this.optionWhiteList.includes('BP')\n    },\n    async onFinish(formData: any) {\n      const encounter = await this.vitals.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create treatment encounter\");\n\n      const obs = await this.buildObs(formData);\n      const observations = await this.vitals.saveObservationList(obs);\n\n      if (!observations) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      this.nextTask();\n    },\n    async buildObs(formData: any) {\n      const observations: any = await this.mapObs(\n        this.sanitizeVitals(formData.vitals).filter(\n          (element) => element.label !== \"BP\"\n        ).map((e: any) => {\n          if (e.label === 'Height' && e.other.visible && this.finalHeightValue) {\n            e.value = this.finalHeightValue\n          }\n          return e\n        })\n      );\n      if (this.HTNEnabled && !this.hasHTNObs && formData.on_htn_medication) {\n        const obs = await this.vitals.buildValueText(\n          \"Treatment status\",\n          formData.on_htn_medication.value\n        );\n        observations.push(obs);\n      }\n      return observations;\n    },\n    splitBP(formData: Option[]) {\n      const p: Option[] = [];\n      formData.forEach((element) => {\n        if (element.label === \"BP\") {\n          const value = `${element.value}`.split(\"/\");\n          const bpSystolic = value[0];\n          const bpDiastolic = value[1];\n\n          p.push({ label: \"Systolic\", value: bpSystolic });\n          p.push({ label: \"Diastolic\", value: bpDiastolic });\n        }\n      });\n      return p;\n    },\n    getBMI(formData: Option[]) {\n      const weight = this.getVal(formData, \"Weight\");\n      const height = this.getVal(formData, \"Height\");\n      const obs: any = [];\n      if (this.age <= 14) {\n        const currentWeightPercentile = (\n          (weight / parseFloat(this.medianWeightandHeight[\"weight\"])) *\n          100\n        ).toFixed(0);\n        const currentHeightPercentile = (\n          (height / parseFloat(this.medianWeightandHeight[\"height\"])) *\n          100\n        ).toFixed(0);\n        const currentHeightRounded =\n          (height % Math.floor(height) < 0.5 ? 0 : 0.5) + Math.floor(height);\n        const medianWeightHeight =\n          this.weightForHeight[currentHeightRounded.toFixed(1)];\n        const weightForHeightPercentile = (\n          (weight / medianWeightHeight) *\n          100\n        ).toFixed(0);\n        if(!isNaN(parseFloat(weightForHeightPercentile))) {\n          obs.push({\n            label: \"Weight for height percent of median\",\n            value: weightForHeightPercentile,\n          });\n        }\n        obs.push({\n          label: \"Weight for age percent of median\",\n          value: currentWeightPercentile,\n        });\n        obs.push({\n          label: \"Height for age percent of median\",\n          value: currentHeightPercentile,\n        });\n      } else {\n        const BMI = BMIService.calculateBMI(weight, height);\n        obs.push({ label: \"BMI\", value: BMI });\n      }\n      return obs;\n    },\n    getVal(formData: Option[], val: string): number {\n      const value = formData.filter((key: any) => key.label === val);\n      return value[0].value === \"\" ? 0 : parseFloat(`${value[0].value}`);\n    },\n    async mapObs(vitals: any) {\n      const j = vitals.map(async (element: any) => {\n        const obs = await this.vitals.buildValueNumber(\n          element.label,\n          element.value\n        );\n        return obs;\n      });\n      return Promise.all(j);\n    },\n    validateVitals(vitals: any) {\n      const l = this.checkRequiredVitals(vitals);\n      if (l.length > 0) {\n        return l.map((val) => {\n          return [`${val.label} can not be empty`];\n        });\n      }\n      const v = this.sanitizeVitals(vitals);\n      return this.vitals.validateAll(v);\n    },\n    sanitizeVitals(vitals: Array<Option>) {\n      let p = vitals.filter((element) => {\n        if (element.label === \"Height\" && element.other.required == false) {\n          return false;\n        }\n        return element.value !== \"\" && element.label !== \"Age\";\n      })\n      if (this.canCheckBp()) {\n        p = p.concat(this.splitBP(p))\n      }\n      if (this.canCheckWeightHeight()){\n        p = p.concat(this.getBMI(vitals))\n      }\n      return p\n    },\n    checkRequiredVitals(vitals: Array<Option>) {\n      return vitals.filter((element) => {\n        return element.value === \"\" && element.other.required === true;\n      });\n    },\n    getFields(): Array<Field> {\n      const HTNEnabled = this.HTNEnabled;\n      const hasHTNObs = this.hasHTNObs;\n      return [\n        {\n          id: \"on_htn_medication\",\n          helpText: \"Already taking drugs for blood pressure?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => {\n            // This page is reused in other programs that's why we're adding\n            // an ART check. \n            return HTNEnabled && !hasHTNObs && this.app?.applicationName === 'ART';\n          },\n          options: () => [\n            {\n              label: \"Yes\",\n              value: \"BP Drugs started\",\n            },\n            {\n              label: \"No\",\n              value: \"Not on BP Drugs\",\n            },\n          ],\n        },\n        {\n          id: \"vitals\",\n          helpText: \"Vitals entry\",\n          type: FieldType.TT_VITALS_ENTRY,\n          validation: (value: any) => this.validateVitals(value),\n          beforeNext: async (val: Option[]) => {\n            const heightOption = find(val, { label: \"Height\" });\n            if (heightOption && this.recentHeight && heightOption.other.visible) {\n              const enteredHeight = parseInt(`${heightOption.value || 0}`);\n              const prevHeight = parseInt(`${this.recentHeight || 0}`);\n\n              /** Warn if inconsistent height is detected */\n              if (enteredHeight < prevHeight) {\n                const prevHeightBtnTxt = `Use ${prevHeight} CM`\n                const newHeightBtnTxt = `Use ${enteredHeight} CM`\n                const action = await infoActionSheet(\n                  `Previous Height \"${prevHeight} CM\"`,\n                  `Current Height \"${enteredHeight} CM\"`,\n                  `Inconsistent Height Reading (Height can not be lower than previous height of \" ${this.recentHeight} \"CM. Please SELECT the correct height.)`,\n                  [\n                    {\n                      name: prevHeightBtnTxt,\n                      slot: 'start',\n                      color: 'success'\n                    },\n                    {\n                      name: newHeightBtnTxt,\n                      slot: 'end',\n                      color: 'danger'\n                    }\n                  ]\n                )\n                if (action === newHeightBtnTxt && this.recentHeightObsID) {\n                  if ((await alertConfirmation(\n                    `Do you want to void height observation for ${prevHeight}`\n                  ))) {\n                    await VitalsService.voidObs(this.recentHeightObsID)\n                  }\n                } else {\n                  this.finalHeightValue = prevHeight\n                }\n              }\n            }\n            return true\n          },\n          config: {\n            hiddenFooterBtns : [\n              'Clear'\n            ],\n            onUpdateAlertStatus: async (params: Option[]) => {\n              const weightOption = find(params, { label: 'Weight'})\n              const heightOption = find(params, { label: 'Height'})\n\n              if (!(weightOption && heightOption)) return\n\n              const weight = parseFloat(weightOption.value as string)\n              const height = parseFloat(heightOption.value as string)\n\n              if (weight <= 0 || height <=0) return { \n                label: 'BMI',\n                value: 'N/A',\n                color: '', \n                status: ''\n              }\n\n              const BMI = await BMIService.getBMI(weight, height, this.gender, this.age);\n\n              return {\n                label: 'BMI',\n                value: BMI.index,\n                color: BMI.color, \n                status: BMI.result\n              }\n            },\n            onChangeOption: (activeItem: any) => {\n              if (!activeItem.value && activeItem.other.required) {\n                throw `Value for ${activeItem.label} is required`\n              }else if (activeItem.value) {\n                const errs = this.vitals.validator(activeItem)\n                if(errs && errs.length) throw errs\n              }\n            }\n          },\n          options: () => this.getOptions(),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./Vitals.vue?vue&type=template&id=dcaccc4c&ts=true\"\nimport script from \"./Vitals.vue?vue&type=script&lang=ts\"\nexport * from \"./Vitals.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { isArray } from \"lodash\";\nimport { Option } from '@/components/Forms/FieldInterface';\nexport class VitalsService extends AppEncounterService{\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 6, providerID);\n  }\n  isNotEmptyandNumber(vital: Option) {\n    return `${vital.value}`.match(/^-?\\d+\\.?\\d*$/) ? null : [`Invalid entry for ${vital.label}`]\n  }\n  isNotEmptyandFloat(vital: Option) {\n    return `${vital.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/) \n      ? null \n      : [`Invalid entry for ${vital.label}. Don't forget to add a decimal. e.g. 56.2 ${vital.other.modifier}`]\n  }\n  checkMinMax(val: Option, min: number, max: number) {\n    const p = [];\n    if (parseFloat(`${val.value}`) < min) {\n      p.push([`${val.label} entered is less than minimum ${min} ${val?.other?.modifier || ''}`])\n    }\n    if (parseFloat(`${val.value}`) > max) {\n      p.push([`${val.label} entered is greater than maximum ${max} ${val?.other?.modifier || ''}`])\n    }\n    return p.length > 0 ? p : null;\n  }\n  validateAll(vitals: Option[]) {\n    const p: any = [];\n    vitals.map((vital: any) => {\n      const j = this.validator(vital);\n      return isArray(j) ? p.push(j) : null\n    })\n    return p.length > 0 ? p : null;\n  }\n\n  mergeErrors(errors: any[]) {\n    const holder: any = [];\n    errors.forEach(element => {\n      if (isArray(element)) {\n        holder.push(element)\n      }\n    });\n    return holder.length > 0 ? holder : null\n  }\n  isValidBPReading(vital: any) {\n    const p = [];\n    const isValidBP =  `${vital.value}`.match(/^\\d{1,3}\\/\\d{1,3}$/g) ? null : ['Invalid BP reading']\n    p.push(isValidBP);\n    if(isValidBP == null) {\n      const value = `${vital.value}`.split('/');\n      \n      const bpSystolic = {\n        label: 'Systolic',\n        value: value[0]\n      };\n      const bpDiastolic = {\n        label: 'Diastolic',\n        value: value[1]\n      };\n      p.push(this.checkMinMax(bpDiastolic, 30, 200))\n      p.push(this.checkMinMax(bpSystolic, 40, 250))\n    }\n    return this.mergeErrors(p)\n  }\n  validator(vital: Option) {\n    const values = [\n      {\n        name: \"Weight\",\n        validator: (val: Option) => {\n          const emptyErrors = this.isNotEmptyandFloat(val);\n          const minErrors = this.checkMinMax(val, 2.0, 250.0);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      },\n      {\n        name: \"Height\",\n        validator: (val: Option) => {\n          const errors = []\n          errors.push(this.isNotEmptyandNumber(val))\n          errors.push(this.checkMinMax(val, 40, 220))\n          return this.mergeErrors(errors); \n        },\n      }, {\n        name: \"BP\",\n        validator: (val: any) => {\n          return this.isValidBPReading(val)\n        },\n      }, {\n        name: \"Temp\",\n        validator: (val: any) => {\n          const emptyErrors = this.isNotEmptyandNumber(val);\n          const minErrors = this.checkMinMax(val, 30, 42);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      }, {\n        name: \"SP02\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 40, 100);\n          return this.mergeErrors([minErrors]); \n        },\n      }, {\n        name: \"Pulse\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 50, 120);\n          return this.mergeErrors([minErrors]); \n        },\n      }\n    ]\n    const v = values.filter(element => {\n      return element.name === vital.label;\n    });\n    if (v.length > 0) {\n      return v[0].validator(vital);\n    }\n    return null\n  }\n}"],"sourceRoot":""}