{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/CxCa/views/encounters/CxCaScreeningResult.vue"],"names":["LocationService","Service","constructor","type","name","parentLocation","postJson","params","getJson","conceptId","ConceptService","getConceptID","id","regionID","traditionalAuthorityID","villageID","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","ScreeningResultService","AppEncounterService","patientID","providerID","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","screeningResult","obs","currentMethod","watch","patient","this","getTreatmentOptions","getFields","deep","methods","formData","computed","encounter","createEncounter","toastWarning","treatment_option","value","push","buildValueText","label","vals","Object","keys","forEach","element","Promise","all","saveObservationList","toastSuccess","nextTask","getFacilities","filter","getFirstValueCoded","getOptions","method","gotoPatientDashboard","match","helpText","FieldType","TT_SELECT","validation","val","Validation","required","options","yesNoOptions","computedValue","buildValueCoded","mapOptions","condition","results_available","screening_result","offer_via","includes","_","config","showKeyboard","isFilterDataViaApi","__exports__","async","facilities","f","isEmpty","map","facility","location_id","other","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","villages","village","village_id"],"mappings":"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","file":"js/chunk-7ba3c49a.dee190fc.js","sourcesContent":["import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f))\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport {ScreeningResultService} from \"@/apps/CxCa/services/CxCaScreeningResultService\"\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    screeningResult: {} as any,\n    obs: [] as any,\n    currentMethod: ''\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.screeningResult = new ScreeningResultService(\n          this.patientID,\n          this.providerID\n        );\n        this.currentMethod = await this.getTreatmentOptions(); \n        this.fields = this.getFields();\n        \n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computed: any) {\n      const encounter = await this.screeningResult.createEncounter();\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      if(formData.treatment_option && formData.treatment_option.value === \"Referral\") {\n        this.obs.push(this.screeningResult.buildValueText('Referral location', formData['location'].label))\n      }\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...this.obs, ...vals]);\n      await this.screeningResult.saveObservationList(data);\n      toastSuccess(\"Observations and encounter created!\");\n      this.nextTask();\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    async getTreatmentOptions() {\n      return await this.screeningResult.getFirstValueCoded('CxCa screening method');\n    },\n    getOptions(method: string) {\n      if(!method) {\n        \n        toastWarning(\"No screening methods have been selected\");\n        this.gotoPatientDashboard();\n\n      }\n      if(method.match(/via/i)){\n        return [\"VIA Negative\",\"VIA Positive\",\"Suspect Cancer\"];\n      }else if(method.match(/smear/i)){\n        return [\"PAP Smear Normal\",\"PAP Smear Abnormal\"];\n      }else if(method.match(/HPV DNA/i)){\n        return [\"HPV positive\",\"HPV negative\"];\n      }else if(method.match(/Speculum/i)){\n        return [\"Visible Lesion\",\"No visible Lesion\", \"Suspect Cancer\", \"Other Gynae\"];\n      }\n      return []\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"results_available\",\n          helpText: \"Screening result available\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Screening results available', value.value)\n          })\n        },\n        {\n          id: \"screening_result\",\n          helpText: \"Screening Result\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.mapOptions([...this.getOptions(this.currentMethod)]),\n          condition(formData: any) {\n            return formData.results_available.value === \"Yes\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Screening results', value.value)\n          })\n        },\n        {\n          id: \"gynae_options\",\n          helpText: \"Other Gynae treatment\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"STI\",\n              \"Cervicitis\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.screening_result.value === \"Other Gynae\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Screening results', value.value)\n          })\n        },\n        {\n          id: \"offer_via\",\n          helpText: \"Offer VIA\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          condition(formData: any) {\n            return formData.screening_result.value === \"HPV positive\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Patient went for VIA?', value.value)\n          })\n        },\n        {\n          id: \"via_screening_results\",\n          helpText: \"VIA screening results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"VIA negative\",\n              \"VIA positive\",\n              \"Suspect cancer\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.offer_via.value === \"Yes\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('VIA Results', value.value)\n          })\n        },\n        {\n          id: \"reason_for_not_offering_via\",\n          helpText: \"Reason for NOT offering VIA\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Client NOT ready\",\n              \"Treatment not available\",\n              \"Other conditions\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.offer_via.value === \"No\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Other reason for not seeking services', value.value)\n          })\n        },\n        {\n          id: \"treatment_option\",\n          helpText: \"Enter treatment option\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Same day treatment\",\n              \"Postponed treatment\",\n              \"Referral\",\n            ]);\n          },\n          condition(formData: any) {\n            return !['VIA Negative', 'No visible Lesion', 'PAP Smear Abnormal', 'HPV negative'].includes(formData.screening_result.value);\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Directly observed treatment option', value.value)\n          })\n        },\n        {\n          id: \"postponed_reason\",\n          helpText: \"Select reason for postponing treatment\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Client not ready\",\n              \"Treatment not available\",\n              \"Other conditions\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.treatment_option.value === \"Postponed treatment\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Postponed reason', value.value)\n          })\n        },\n        {\n          id: \"referral_rreason\",\n          helpText: \"Referral reason\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Further Investigation and Management\",\n              \"Large Lesion (Greater than 75 percent)\",\n              \"Unable to treat client\",\n              \"Suspect Cancer\",\n              \"Treatment not available\",\n              \"Other conditions\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.treatment_option.value === \"Referral\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Referral reason', value.value)\n          })\n        },\n        {\n          id: \"location\",\n          helpText: \"Location reffered from\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (_: any, filter = \"\") => this.getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n          condition(formData: any) {\n            return formData.treatment_option.value === \"Referral\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueText('Referral location', value.label)\n          })\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaScreeningResult.vue?vue&type=template&id=3be0a10a&ts=true\"\nimport script from \"./CxCaScreeningResult.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaScreeningResult.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}