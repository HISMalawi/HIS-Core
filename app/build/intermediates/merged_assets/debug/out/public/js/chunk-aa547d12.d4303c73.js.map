{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/CxCa/views/encounters/CxCaResult.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","patientType","watch","patient","this","PatientTypeService","patientID","providerID","loadPatientType","getFields","deep","methods","formData","getFacilities","filter","id","helpText","type","FieldType","TT_SELECT","validation","val","Validation","required","options","mapOptions","__exports__","LocationService","Service","constructor","name","parentLocation","postJson","params","getJson","conceptId","ConceptService","getConceptID","regionID","traditionalAuthorityID","villageID","async","facilities","f","isEmpty","map","facility","label","value","location_id","other","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","villages","village","village_id"],"mappings":"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","file":"js/chunk-aa547d12.d4303c73.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    patientType: {} as any,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.patientType = new PatientTypeService(\n          this.patientID,\n          this.providerID\n        );\n        await this.patientType.loadPatientType();\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      //       const encounter = await this.patientType.createEncounter();\n      //       if (!encounter) return toastWarning(\"Unable to create encounter\");\n      //       this.patientType.setLocationName(formData?.location?.label);\n      //       this.patientType.setPatientType(formData?.patient_type?.value);\n      //       await this.patientType.save();\n      //       toastSuccess(\"Observations and encounter created!\");\n      //       this.nextTask();\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"via_test_results\",\n          helpText: \"VIA test results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Negative\",\n              \"Positive\",\n              \"Suspect\",\n            ]);\n          },\n        },\n        {\n          id: \"pap_smear\",\n          helpText: \"PAP Smear Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"PAP Smear normal\",\n              \"PAP Smear abnormal\"\n            ]);\n          },\n        },\n        {\n          id: \"hpv_dna\",\n          helpText: \"HPV DNA Test Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"HPV negative\",\n              \"HPV positive\"\n            ]);\n          },\n        },\n        {\n          id: \"speculum_exam\",\n          helpText: \"Speculum Exam Results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Visible Lesion\",\n              \"No Visible lesion\",\n              \"Other gynaecological condition\",\n            ]);\n          },\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaResult.vue?vue&type=template&id=59ae6bcf&ts=true\"\nimport script from \"./CxCaResult.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaResult.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f))\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}