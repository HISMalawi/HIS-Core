{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/components/DataViews/DrillTableModal.vue","webpack:///./src/views/DuplicateIdentifiers.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_openBlock","_createBlock","title","period","rows","fields","columns","canExportCsv","canExportPDf","onReportConfiguration","onPeriod","_hoisted_1","key","_hoisted_2","_hoisted_3","_createTextVNode","_component_ion_title","_component_ion_toolbar","_component_ion_header","_component_his_basic_table","_component_text_skeloton","_component_ion_content","_component_ion_button","_component_ion_footer","_Fragment","_createVNode","default","_withCtx","_toDisplayString","_","ready","color","onClick","closeModal","slot","defineComponent","components","HisBasicTable","IonHeader","IonToolbar","IonContent","IonFooter","IonButton","TextSkeloton","props","type","String","required","Object","onRows","Function","data","watch","func","immediate","deep","methods","modalController","dismiss","__exports__","ReportTemplate","service","dde","table","thTxt","this","getFormFields","PatientDemographicsExchangeService","loadDDEStatus","identifier","idType","parseInt","value","toString","label","IdentifierService","setIdentifierType","getRows","id","helpText","FieldType","TT_SELECT","validation","val","Validation","options","async","getIdentifierTypes","map","i","name","patient_identifier_type_id","toDate","date","HisDate","toStandardHisDisplayFormat","modal","create","component","DrillTable","cssClass","componentProps","patients","getPatientsByIdentifier","p","patient","Patientservice","getGivenName","getFamilyName","getGender","getBirthdate","action","then","$router","push","getID","e","toastDanger","present","getDuplicateIndentifiers","td","count","tdBtn","drillDuplicates","event","disabled","getIdentifierType","Service","constructor","super","identifierType","getJson","arvNumber","getProgramID","exists"],"mappings":"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","file":"js/chunk-d56df1c4.297cbe90.js","sourcesContent":["import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment } from \"vue\"\n\nconst _hoisted_1 = { key: 0 }\nconst _hoisted_2 = { key: 1 }\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\" Close \")\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")\n  const _component_ion_header = _resolveComponent(\"ion-header\")\n  const _component_his_basic_table = _resolveComponent(\"his-basic-table\")\n  const _component_text_skeloton = _resolveComponent(\"text-skeloton\")\n  const _component_ion_content = _resolveComponent(\"ion-content\")\n  const _component_ion_button = _resolveComponent(\"ion-button\")\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")\n\n  return (_openBlock(), _createBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(_toDisplayString(_ctx.title), 1 /* TEXT */)\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, null, {\n      default: _withCtx(() => [\n        (_ctx.ready)\n          ? (_openBlock(), _createBlock(\"div\", _hoisted_1, [\n              _createVNode(_component_his_basic_table, {\n                columns: _ctx.columns,\n                rows: _ctx.rows\n              }, null, 8, [\"columns\", \"rows\"])\n            ]))\n          : (_openBlock(), _createBlock(\"div\", _hoisted_2, [\n              _createVNode(_component_text_skeloton)\n            ]))\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              color: \"danger\",\n              onClick: _ctx.closeModal,\n              slot: \"end\"\n            }, {\n              default: _withCtx(() => [\n                _hoisted_3\n              ]),\n              _: 1\n            }, 8, [\"onClick\"])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64 /* STABLE_FRAGMENT */))\n}","\nimport { defineComponent } from 'vue'\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport { FieldType } from '@/components/Forms/BaseFormElements'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { Option } from '@/components/Forms/FieldInterface'\nimport table, { RowInterface } from \"@/components/DataViews/tables/ReportDataTable\"\nimport { IdentifierService, DuplicateIdentifiersInterface } from \"@/services/identifier_service\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport DrillTable from \"@/components/DataViews/DrillTableModal.vue\"\nimport { modalController } from \"@ionic/vue\";\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport {PatientDemographicsExchangeService} from \"@/services/patient_demographics_exchange_service\"\nimport { toastDanger } from '@/utils/Alerts'\nexport default defineComponent({\n    components: { ReportTemplate },\n    data: () => ({\n        service: {} as any,\n        dde: {} as any,\n        title: 'Duplicate Identifiers',\n        fields: [] as Field[],\n        rows: [] as Array<RowInterface[]>,\n        columns: [\n            [\n                table.thTxt('Identifier'), \n                table.thTxt('Count'), \n                table.thTxt('View'),\n                table.thTxt('Resolve')\n            ]\n        ]\n    }),\n    async created() {\n        this.fields = this.getFormFields()\n        this.dde = new PatientDemographicsExchangeService()\n        await this.dde.loadDDEStatus()\n    },\n    methods: {\n        async onPeriod({identifier}: any) {\n            const idType = parseInt(identifier.value.toString())\n            this.title = identifier.label + ' Duplicates'\n            this.service = new IdentifierService()\n            this.service.setIdentifierType(idType)\n            this.rows = await this.getRows()\n        },\n        getFormFields(): Array<Field> {\n            return [\n                {\n                    id: 'identifier',\n                    helpText: 'Select Identifier type',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => \n                        (await IdentifierService.getIdentifierTypes())\n                            .map((i: any) => ({\n                                label: i.name,\n                                value: i.patient_identifier_type_id\n                            }))\n                }\n            ]\n        },\n        toDate(date: string | Date) {\n            return HisDate.toStandardHisDisplayFormat(date)\n        },\n        async drillDuplicates(identifier: string){\n            const modal = await modalController.create({\n                component: DrillTable,\n                cssClass: 'custom-modal',\n                componentProps: {\n                    title: `Persons using identifier ${identifier}`,\n                    columns: [\n                        'Given name', 'Family name', 'Gender', 'Birth date', 'Action'\n                    ],\n                    onRows: async () => {\n                        const patients = await this.service.getPatientsByIdentifier(identifier)\n                        return patients.map((p: any) => {\n                            try {\n                                const patient = new Patientservice(p)\n                                return [\n                                    patient.getGivenName(),\n                                    patient.getFamilyName(),\n                                    patient.getGender(),\n                                    this.toDate(patient.getBirthdate()),\n                                    {\n                                        type: 'button',\n                                        name: 'View',\n                                        action: () => {\n                                            modalController.dismiss().then(() => {\n                                                this.$router.push(`/patient/dashboard/${patient.getID()}`)\n                                            })\n                                        }\n                                    }\n                                ]\n                            } catch (e) {\n                                toastDanger('Unable to load patient details')\n                                return ['N/A', 'N/A', 'N/A', 'N/A', 'N/A']\n                            }\n                        })\n                    }\n                }\n            })\n            modal.present()\n        },\n        async getRows() {\n            return (await this.service.getDuplicateIndentifiers())\n                .map((i: DuplicateIdentifiersInterface) => ([\n                    table.td(i.identifier),\n                    table.td(i.count),\n                    table.tdBtn('Select', () => this.drillDuplicates(i.identifier)),\n                    table.tdBtn('Resolve', () => {\n                        this.$router.push(`/npid/duplicates/${i.identifier}`)\n                    }, {\n                        event: {\n                            disabled: this.service.getIdentifierType() != 3\n                        }\n                    }, 'danger')\n                ]))\n        }\n    }\n})\n","import { render } from \"./DrillTableModal.vue?vue&type=template&id=0cd2f14a&ts=true\"\nimport script from \"./DrillTableModal.vue?vue&type=script&lang=ts\"\nexport * from \"./DrillTableModal.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./DuplicateIdentifiers.vue?vue&type=template&id=5c350c67&ts=true\"\nimport script from \"./DuplicateIdentifiers.vue?vue&type=script&lang=ts\"\nexport * from \"./DuplicateIdentifiers.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"./service\";\nimport ART from \"@/apps/ART/app\"\n\nexport interface DuplicateIdentifiersInterface {\n    count: number;\n    identifier: string;\n}\n\nexport class IdentifierService extends Service {\n    identifierType: number\n    constructor() {\n        super()\n        this.identifierType = -1\n    }\n \n    static getIdentifierTypes() {\n        return super.getJson('types/patient_identifiers')\n    }\n\n    static async arvNumberExists(arvNumber: string): Promise<boolean> {\n        const data = await super.getJson(`programs/${super.getProgramID()}/lookup_arv_number/${arvNumber}`)\n        return data.exists\n    }\n\n    getIdentifierType() {\n        return this.identifierType\n    }\n\n    setIdentifierType(type: number) {\n        this.identifierType = type\n    }\n\n    getDuplicateIndentifiers(): Promise<DuplicateIdentifiersInterface[]> {\n        return Service.getJson(`search/identifiers/duplicates`, {\n            'type_id': this.identifierType\n        })\n    }\n\n    getPatientsByIdentifier(identifier: string) {\n        return Service.getJson(`search/patients/by_identifier`,{\n            'type_id': this.identifierType,\n            'identifier': identifier\n        })\n    }\n}\n"],"sourceRoot":""}